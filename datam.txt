Found Java files:
Analyzing: ./DigitalSteganography/src/TextSteganography/Text_Decryption.java

Classes: {'Text_Decryption'}
Imports: {'javax.swing.JOptionPane'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {' ': 7.70489817920574}
Anomalies detected using GESD: {' ': 7.70489817920574}
Anomalies detected using Quantile: {' ': 2315, 'o': 492, 'a': 697, 'n': 474, 'e': 644, 't': 558, '.': 462}
Fourier Transform Values: [914450.          10101.85250144   9767.01242418 ...   9016.10947876
   9767.01242418  10101.85250144]
Entropy: 4.392734134153395
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: Properties
Match: TextSteganography
Match: JOptionPane
Match: Decryption
Match: Decryption
Match: Decryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jScrollPane1
Match: JScrollPane
Match: jTextArea1
Match: jTextField1
Match: JTextField
Match: jScrollPane2
Match: JScrollPane
Match: jTextArea2
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jTextArea1
Match: setColumns
Match: jTextArea1
Match: Monospaced
Match: jTextArea1
Match: setLineWrap
Match: jTextArea1
Match: jTextArea1
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextArea1
Match: jTextField1
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextArea2
Match: setColumns
Match: jTextArea2
Match: Monospaced
Match: jTextArea2
Match: setLineWrap
Match: jTextArea2
Match: jTextArea2
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane2
Match: setViewportView
Match: jTextArea2
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextArea1
Match: jTextField1
Match: JOptionPane
Match: showMessageDialog
Match: jTextArea1
Match: jTextField1
Match: toCharArray
Match: StringBuilder
Match: StringBuilder
Match: jTextArea2
Match: jButton1ActionPerformed
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: Decryption
Match: InstantiationException
Match: Decryption
Match: IllegalAccessException
Match: Decryption
Match: UnsupportedLookAndFeelException
Match: Decryption
Match: EventQueue
Match: invokeLater
Match: Decryption
Match: setVisible
Match: declaration
Match: modify//GEN
Match: JScrollPane
Match: jScrollPane1
Match: JScrollPane
Match: jScrollPane2
Match: jTextArea1
Match: jTextArea2
Match: JTextField
Match: jTextField1
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match:  * To change this license header, choose License Headers in Project Properties.
Match:  * To change this template file, choose Tools | Templates
Match:  * and open the template in the editor.
Match: package TextSteganography;
Match: import javax.swing.JOptionPane;
Match:  * @author Hadi
Match: public class Text_Decryption extends javax.swing.JFrame {
Match:      * Creates new form Text_Decryption
Match:     public Text_Decryption() {
Match:         initComponents();
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jScrollPane1 = new javax.swing.JScrollPane();
Match:         jTextArea1 = new javax.swing.JTextArea();
Match:         jTextField1 = new javax.swing.JTextField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jScrollPane2 = new javax.swing.JScrollPane();
Match:         jTextArea2 = new javax.swing.JTextArea();
Match:         jPanel2 = new javax.swing.JPanel();
Match:         jButton3 = new javax.swing.JButton();
Match:         jButton2 = new javax.swing.JButton();
Match:         jButton1 = new javax.swing.JButton();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
Match:         jTextArea1.setColumns(20);
Match:         jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
Match:         jTextArea1.setLineWrap(true);
Match:         jTextArea1.setRows(5);
Match:         jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter the Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
Match:         jScrollPane1.setViewportView(jTextArea1);
Match:         jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Enter a number between 1 and 10 : ");
Match:         jTextArea2.setColumns(20);
Match:         jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
Match:         jTextArea2.setLineWrap(true);
Match:         jTextArea2.setRows(5);
Match:         jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Your Encrypted Message : ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
Match:         jScrollPane2.setViewportView(jTextArea2);
Match:         jPanel2.setBackground(new java.awt.Color(6, 6, 6));
Match:         jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton3.setText("Reset");
Match:         jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton2.setText("Save");
Match:         jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton1.setText("Decode");
Match:         jButton1.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton1ActionPerformed(evt);
Match:             }
Match:         });
Match:         javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
Match:         jPanel2.setLayout(jPanel2Layout);
Match:         jPanel2Layout.setHorizontalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel2Layout.createSequentialGroup()
Match:                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                 .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(19, 19, 19))
Match:         );
Match:         jPanel2Layout.setVerticalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel2Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addGroup(jPanel2Layout.createSequentialGroup()
Match:                         .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                             .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                             .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                         .addGap(0, 0, Short.MAX_VALUE))
Match:                     .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addContainerGap())
Match:         );
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
Match:                     .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
Match:                 .addContainerGap())
Match:             .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
Match:                     .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:         );
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Match:         if(jTextArea1.getText().isEmpty()|| jTextField1.getText().isEmpty())
Match:         JOptionPane.showMessageDialog(this, "Please Enter a Message First! and a Number Password");
Match:         else{
Match:             String message = jTextArea1.getText();
Match:             int pass = Integer.parseInt(jTextField1.getText());
Match:             char[] mess = message.toCharArray();
Match:             StringBuilder sb = new StringBuilder();
Match:             for(char c : mess){
Match:                 sb.append(c = (char) (c - pass));
Match:             }
Match:             jTextArea2.setText(sb.toString());
Match:     }//GEN-LAST:event_jButton1ActionPerformed
Match:      * @param args the command line arguments
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             public void run() {
Match:                 new Text_Decryption().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButton1;
Match:     private javax.swing.JButton jButton2;
Match:     private javax.swing.JButton jButton3;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JPanel jPanel2;
Match:     private javax.swing.JScrollPane jScrollPane1;
Match:     private javax.swing.JScrollPane jScrollPane2;
Match:     private javax.swing.JTextArea jTextArea1;
Match:     private javax.swing.JTextArea jTextArea2;
Match:     private javax.swing.JTextField jTextField1;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: Properties
Match: TextSteganography
Match: JOptionPane
Match: Decryption
Match: Decryption
Match: Decryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jScrollPane1
Match: JScrollPane
Match: jTextArea1
Match: jTextField1
Match: JTextField
Match: jScrollPane2
Match: JScrollPane
Match: jTextArea2
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jTextArea1
Match: setColumns
Match: jTextArea1
Match: Monospaced
Match: jTextArea1
Match: setLineWrap
Match: jTextArea1
Match: jTextArea1
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextArea1
Match: jTextField1
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextArea2
Match: setColumns
Match: jTextArea2
Match: Monospaced
Match: jTextArea2
Match: setLineWrap
Match: jTextArea2
Match: jTextArea2
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane2
Match: setViewportView
Match: jTextArea2
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextArea1
Match: jTextField1
Match: JOptionPane
Match: showMessageDialog
Match: jTextArea1
Match: jTextField1
Match: toCharArray
Match: StringBuilder
Match: StringBuilder
Match: jTextArea2
Match: jButton1ActionPerformed
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: Decryption
Match: InstantiationException
Match: Decryption
Match: IllegalAccessException
Match: Decryption
Match: UnsupportedLookAndFeelException
Match: Decryption
Match: EventQueue
Match: invokeLater
Match: Decryption
Match: setVisible
Match: declaration
Match: JScrollPane
Match: jScrollPane1
Match: JScrollPane
Match: jScrollPane2
Match: jTextArea1
Match: jTextArea2
Match: JTextField
Match: jTextField1
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/TextSteganography/Text_Encryption.java

Classes: {'Text_Encryption'}
Imports: {'javax.swing.JOptionPane'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {'a': 2.012041283405019, ' ': 7.811616251351344}
Anomalies detected using GESD: {' ': 7.811616251351344}
Anomalies detected using Quantile: {'a': 683, 'e': 600, ' ': 2270, 't': 542, 'n': 467, 'o': 477, '.': 456}
Fourier Transform Values: [890416.           9391.4096307    8865.92299309 ...   6891.66889148
   8865.92299309   9391.4096307 ]
Entropy: 4.392454776980233
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: TextSteganography
Match: JOptionPane
Match: Encryption
Match: Encryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jScrollPane1
Match: JScrollPane
Match: jTextArea1
Match: jTextField1
Match: JTextField
Match: jScrollPane2
Match: JScrollPane
Match: jTextArea2
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jTextArea1
Match: setColumns
Match: jTextArea1
Match: Monospaced
Match: jTextArea1
Match: setLineWrap
Match: jTextArea1
Match: jTextArea1
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextArea1
Match: jTextField1
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextArea2
Match: setColumns
Match: jTextArea2
Match: Monospaced
Match: jTextArea2
Match: setLineWrap
Match: jTextArea2
Match: jTextArea2
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane2
Match: setViewportView
Match: jTextArea2
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextArea1
Match: jTextField1
Match: JOptionPane
Match: showMessageDialog
Match: jTextArea1
Match: jTextField1
Match: toCharArray
Match: StringBuilder
Match: StringBuilder
Match: jTextArea2
Match: jButton1ActionPerformed
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: Encryption
Match: InstantiationException
Match: Encryption
Match: IllegalAccessException
Match: Encryption
Match: UnsupportedLookAndFeelException
Match: Encryption
Match: EventQueue
Match: invokeLater
Match: Encryption
Match: setVisible
Match: declaration
Match: modify//GEN
Match: JScrollPane
Match: jScrollPane1
Match: JScrollPane
Match: jScrollPane2
Match: jTextArea1
Match: jTextArea2
Match: JTextField
Match: jTextField1
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match: package TextSteganography;
Match: import javax.swing.JOptionPane;
Match:  * @author Hadi
Match: public class Text_Encryption extends javax.swing.JFrame {
Match:     public Text_Encryption() {
Match:         initComponents();
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jScrollPane1 = new javax.swing.JScrollPane();
Match:         jTextArea1 = new javax.swing.JTextArea();
Match:         jTextField1 = new javax.swing.JTextField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jScrollPane2 = new javax.swing.JScrollPane();
Match:         jTextArea2 = new javax.swing.JTextArea();
Match:         jPanel2 = new javax.swing.JPanel();
Match:         jButton3 = new javax.swing.JButton();
Match:         jButton2 = new javax.swing.JButton();
Match:         jButton1 = new javax.swing.JButton();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
Match:         jTextArea1.setColumns(20);
Match:         jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
Match:         jTextArea1.setLineWrap(true);
Match:         jTextArea1.setRows(5);
Match:         jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter the Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
Match:         jScrollPane1.setViewportView(jTextArea1);
Match:         jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Enter a number between 1 to 10 to Encode Text : ");
Match:         jTextArea2.setColumns(20);
Match:         jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
Match:         jTextArea2.setLineWrap(true);
Match:         jTextArea2.setRows(5);
Match:         jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Your Encrypted Message : ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
Match:         jScrollPane2.setViewportView(jTextArea2);
Match:         jPanel2.setBackground(new java.awt.Color(6, 6, 6));
Match:         jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton3.setText("Reset");
Match:         jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton2.setText("Save");
Match:         jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton1.setText("Embed");
Match:         jButton1.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton1ActionPerformed(evt);
Match:             }
Match:         });
Match:         javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
Match:         jPanel2.setLayout(jPanel2Layout);
Match:         jPanel2Layout.setHorizontalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel2Layout.createSequentialGroup()
Match:                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                 .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(19, 19, 19))
Match:         );
Match:         jPanel2Layout.setVerticalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel2Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addGroup(jPanel2Layout.createSequentialGroup()
Match:                         .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                             .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                             .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                         .addGap(0, 0, Short.MAX_VALUE))
Match:                     .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addContainerGap())
Match:         );
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))
Match:                     .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
Match:                 .addContainerGap())
Match:             .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
Match:                     .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:         );
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Match:         if(jTextArea1.getText().isEmpty()|| jTextField1.getText().isEmpty())
Match:             JOptionPane.showMessageDialog(this, "Please Enter a Message First! and a Number Password");
Match:         else{
Match:         String message = jTextArea1.getText();
Match:         int pass = Integer.parseInt(jTextField1.getText());  
Match:         char[] mess = message.toCharArray();
Match:             StringBuilder sb = new StringBuilder();
Match:         for(char c : mess){
Match:             sb.append(c = (char) (c + pass));        
Match:            jTextArea2.setText(sb.toString());
Match:     }//GEN-LAST:event_jButton1ActionPerformed
Match:      * @param args the command line arguments
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(Text_Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             public void run() {
Match:                 new Text_Encryption().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButton1;
Match:     private javax.swing.JButton jButton2;
Match:     private javax.swing.JButton jButton3;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JPanel jPanel2;
Match:     private javax.swing.JScrollPane jScrollPane1;
Match:     private javax.swing.JScrollPane jScrollPane2;
Match:     private javax.swing.JTextArea jTextArea1;
Match:     private javax.swing.JTextArea jTextArea2;
Match:     private javax.swing.JTextField jTextField1;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: TextSteganography
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: createTitledBorder
Match: setHorizontalAlignment
Match: createTitledBorder
Match: addActionListener
Match: jButton1ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: TextSteganography
Match: JOptionPane
Match: Encryption
Match: Encryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jScrollPane1
Match: JScrollPane
Match: jTextArea1
Match: jTextField1
Match: JTextField
Match: jScrollPane2
Match: JScrollPane
Match: jTextArea2
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jTextArea1
Match: setColumns
Match: jTextArea1
Match: Monospaced
Match: jTextArea1
Match: setLineWrap
Match: jTextArea1
Match: jTextArea1
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextArea1
Match: jTextField1
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextArea2
Match: setColumns
Match: jTextArea2
Match: Monospaced
Match: jTextArea2
Match: setLineWrap
Match: jTextArea2
Match: jTextArea2
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane2
Match: setViewportView
Match: jTextArea2
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel2Layout
Match: createSequentialGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextField1
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane2
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextArea1
Match: jTextField1
Match: JOptionPane
Match: showMessageDialog
Match: jTextArea1
Match: jTextField1
Match: toCharArray
Match: StringBuilder
Match: StringBuilder
Match: jTextArea2
Match: jButton1ActionPerformed
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: Encryption
Match: InstantiationException
Match: Encryption
Match: IllegalAccessException
Match: Encryption
Match: UnsupportedLookAndFeelException
Match: Encryption
Match: EventQueue
Match: invokeLater
Match: Encryption
Match: setVisible
Match: declaration
Match: JScrollPane
Match: jScrollPane1
Match: JScrollPane
Match: jScrollPane2
Match: jTextArea1
Match: jTextArea2
Match: JTextField
Match: jTextField1
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/ImageSteganography/Encryption.java

Classes: {'Encryption'}
Imports: {'javax.swing', 'javax.imageio', 'java.awt.event', 'Coding.SendEmail', 'java.awt', 'java.awt.image'}
Method References: {'java', 'int', 'byte', 'BufferedImage', 'boolean', 'ActionEvent', 'String'}
Anomalies detected using Z-Score: {'e': 2.891723720149252, ' ': 7.4890127713067685}
Anomalies detected using GESD: {' ': 7.4890127713067685}
Anomalies detected using Quantile: {'a': 351, 'e': 734, ' ': 1735, 't': 464, 'n': 354, 'o': 327, 'r': 295, '\n': 267, 's': 294, 'i': 365}
Fourier Transform Values: [696267.          14081.64547993   9740.74789248 ...   9629.28631816
   9740.74789248  14081.64547993]
Entropy: 4.221439143820001
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: ImageSteganography
Match: //EmbedMessage
Match: Encryption
Match: implements
Match: ActionListener
Match: BufferedImage
Match: sourceImage
Match: embeddedImage
Match: JSplitPane
Match: JSplitPane
Match: JSplitPane
Match: HORIZONTAL
Match: JScrollPane
Match: originalPane
Match: JScrollPane
Match: embeddedPane
Match: JScrollPane
Match: Encryption
Match: stegonographic
Match: assembleInterface
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: setVisible
Match: setDividerLocation
Match: assembleInterface
Match: FlowLayout
Match: getContentPane
Match: BorderLayout
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: GridLayout
Match: JScrollPane
Match: BorderFactory
Match: createTitledBorder
Match: getContentPane
Match: BorderLayout
Match: setLeftComponent
Match: originalPane
Match: setRightComponent
Match: embeddedPane
Match: originalPane
Match: BorderFactory
Match: createTitledBorder
Match: embeddedPane
Match: BorderFactory
Match: createTitledBorder
Match: Steganographed
Match: getContentPane
Match: BorderLayout
Match: actionPerformed
Match: ActionEvent
Match: embedMessage
Match: setVisible
Match: setLocationRelativeTo
Match: resetInterface
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: getSelectedFile
Match: showSaveDialog
Match: JFileChooser
Match: getSelectedFile
Match: showFileDialog
Match: sourceImage
Match: sourceImage
Match: originalPane
Match: getViewport
Match: embedMessage
Match: sourceImage
Match: JOptionPane
Match: showMessageDialog
Match: embeddedImage
Match: sourceImage
Match: getSubimage
Match: sourceImage
Match: sourceImage
Match: embedMessage
Match: embeddedImage
Match: embeddedImage
Match: embeddedPane
Match: getViewport
Match: embedMessage
Match: BufferedImage
Match: messageLength
Match: imageWidth
Match: imageHeight
Match: imageWidth
Match: imageHeight
Match: messageLength
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: embedInteger
Match: messageLength
Match: embedInteger
Match: BufferedImage
Match: storageBit
Match: start/maxY
Match: getBitValue
Match: setBitValue
Match: storageBit
Match: BufferedImage
Match: storageBit
Match: start/maxY
Match: getBitValue
Match: setBitValue
Match: storageBit
Match: embeddedImage
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: showFileDialog
Match: lastIndexOf
Match: toLowerCase
Match: getAbsolutePath
Match: embeddedImage
Match: toUpperCase
Match: resetInterface
Match: originalPane
Match: getViewport
Match: embeddedPane
Match: getViewport
Match: sourceImage
Match: embeddedImage
Match: setDividerLocation
Match: getBitValue
Match: setBitValue
Match: getBitValue
Match: Encryption
Match: embedMessage
Match: Encryption
Potential hidden ASCII Encoding detected:
Match: package ImageSteganography;
Match: //EmbedMessage.java
Match: import Coding.SendEmail;
Match:  import java.awt.image.*;
Match:  import javax.swing.*;
Match:  import java.awt.*;
Match:  import java.awt.event.*;
Match:  import javax.imageio.*;
Match:  * @author Hadi
Match:  public class Encryption extends JFrame implements ActionListener
Match:  JButton open = new JButton("Open"), embed = new JButton("Embed"), send = new JButton("Send"),
Match:     save = new JButton("Save"), reset = new JButton("Reset");
Match:  JTextArea message = new JTextArea(10,3);
Match:  BufferedImage sourceImage = null, embeddedImage = null;
Match:  JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
Match:  JScrollPane originalPane = new JScrollPane(),
Match:     embeddedPane = new JScrollPane();
Match:  public Encryption() {
Match:     super("Embed stegonographic message in image");
Match:     assembleInterface();
Match:     open.setBackground(Color.black);
Match:     open.setForeground(Color.WHITE);
Match:     open.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     open.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Match:     embed.setBackground(Color.black);
Match:     embed.setForeground(Color.WHITE);
Match:     embed.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     embed.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Match:     send.setBackground(Color.black);
Match:     send.setForeground(Color.white);
Match:     send.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     send.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Match:     save.setBackground(Color.black);
Match:     save.setForeground(Color.WHITE);
Match:     save.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     save.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Match:     reset.setBackground(Color.black);
Match:     reset.setForeground(Color.WHITE);
Match:     reset.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     reset.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Match: //    this.setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().
Match: //       getMaximumWindowBounds());
Match:     this.setSize(1000, 700);
Match:     this.setLocationRelativeTo(null);
Match:     this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);   
Match:     this.setVisible(true);
Match:     sp.setDividerLocation(0.5);
Match:     this.validate();
Match:  private void assembleInterface() {
Match:     JPanel p = new JPanel(new FlowLayout());
Match:     p.add(open);
Match:     p.add(embed);
Match:     p.add(send);
Match:     p.add(save);   
Match:     p.add(reset);
Match:     this.getContentPane().add(p, BorderLayout.SOUTH);
Match:     open.addActionListener(this);
Match:     embed.addActionListener(this);
Match:     send.addActionListener(this);
Match:    save.addActionListener(this);   
Match:     reset.addActionListener(this);
Match:     open.setMnemonic('O');
Match:     embed.setMnemonic('E');
Match:     send.setMnemonic('G');
Match:     save.setMnemonic('S');
Match:     reset.setMnemonic('R');
Match:     p = new JPanel(new GridLayout(1,1));
Match:     p.add(new JScrollPane(message));
Match:     message.setFont(new Font("Arial",Font.BOLD,20));
Match:     p.setBorder(BorderFactory.createTitledBorder("Message to be embedded"));
Match:     this.getContentPane().add(p, BorderLayout.NORTH);
Match:     sp.setLeftComponent(originalPane);
Match:     sp.setRightComponent(embeddedPane);
Match:     originalPane.setBorder(BorderFactory.createTitledBorder("Original Image"));
Match:     embeddedPane.setBorder(BorderFactory.createTitledBorder("Steganographed Image"));
Match:     this.getContentPane().add(sp, BorderLayout.CENTER);
Match:  @Override
Match:  public void actionPerformed(ActionEvent ae) {
Match:     Object o = ae.getSource();
Match:     if(o == open)
Match:        openImage();
Match:     else if(o == embed)
Match:        embedMessage();
Match:     else if(o == send)
Match:         SendEmail Email = new SendEmail();
Match:         Email.setVisible(true);
Match:         Email.setLocationRelativeTo(null);
Match:         Email.pack();
Match:     else if(o == save) 
Match:        saveImage();
Match:     else if(o == reset) 
Match:        resetInterface();
Match:  private java.io.File showFileDialog(final boolean open) {
Match:     JFileChooser fc = new JFileChooser("Open an image");
Match:     javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
Match:        @Override
Match:        public boolean accept(java.io.File f) {
Match:           String name = f.getName().toLowerCase();
Match:           if(open)
Match:              return f.isDirectory() || name.endsWith(".jpg") || name.endsWith(".jpeg") ||
Match:                 name.endsWith(".png") || name.endsWith(".gif") || name.endsWith(".tiff") ||
Match:                 name.endsWith(".bmp") || name.endsWith(".dib");
Match:           return f.isDirectory() || name.endsWith(".png") ||    name.endsWith(".bmp");
Match:           }
Match:        @Override
Match:        public String getDescription() {
Match:           if(open)
Match:              return "Image (*.jpg, *.jpeg, *.png, *.gif, *.tiff, *.bmp, *.dib)";
Match:           return "Image (*.png, *.bmp)";
Match:           }
Match:     fc.setAcceptAllFileFilterUsed(false);
Match:     fc.addChoosableFileFilter(ff);
Match:     java.io.File f = null;
Match:    if(open && fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     else if(!open && fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     return f;
Match:  private void openImage() {
Match:     java.io.File f = showFileDialog(true);
Match:     if(f==null)
Match:         return;
Match:     try {   
Match:        sourceImage = ImageIO.read(f);
Match:        JLabel l = new JLabel(new ImageIcon(sourceImage));
Match:        originalPane.getViewport().add(l);
Match:        this.validate();
Match:        } catch(Exception ex) {}
Match:  private void embedMessage() {
Match:     String mess = message.getText();
Match:     if(mess.equals("") || sourceImage.getHeight() == 0){
Match:         JOptionPane.showMessageDialog(this, "Please Select Image and Enter the Text First!");
Match:         return;
Match:     embeddedImage = sourceImage.getSubimage(0,0,
Match:        sourceImage.getWidth(),sourceImage.getHeight());
Match:     embedMessage(embeddedImage, mess);
Match:     JLabel l = new JLabel(new ImageIcon(embeddedImage));
Match:     embeddedPane.getViewport().add(l);
Match:     this.validate();
Match:  private void embedMessage(BufferedImage img, String mess) {
Match:     int messageLength = mess.length();
Match:     int imageWidth = img.getWidth(), imageHeight = img.getHeight(),
Match:        imageSize = imageWidth * imageHeight;
Match:     if(messageLength * 8 + 32 > imageSize) {
Match:        JOptionPane.showMessageDialog(this, "Message is too long for the chosen image",
Match:           "Message too long!", JOptionPane.ERROR_MESSAGE);
Match:        return;
Match:     embedInteger(img, messageLength, 0, 0);
Match:     byte b[] = mess.getBytes();
Match:     for(int i=0; i<b.length; i++)
Match:        embedByte(img, b[i], i*8+32, 0);
Match:  private void embedInteger (BufferedImage img, int n, int start, int storageBit) {
Match:     int maxX = img.getWidth(), maxY = img.getHeight(), 
Match:        startX = start/maxY, startY = start - startX*maxY, count=0;
Match:     for(int i=startX; i<maxX && count<32; i++) {
Match:        for(int j=startY; j<maxY && count<32; j++) {
Match:           int rgb = img.getRGB(i, j), bit = getBitValue(n, count);
Match:           rgb = setBitValue(rgb, storageBit, bit);
Match:           img.setRGB(i, j, rgb);
Match:           count++;
Match:           }
Match:  private void embedByte (BufferedImage img, byte b, int start, int storageBit) {
Match:     int maxX = img.getWidth(), maxY = img.getHeight(), 
Match:        startX = start/maxY, startY = start - startX*maxY, count=0;
Match:     for(int i=startX; i<maxX && count<8; i++) {
Match:        for(int j=startY; j<maxY && count<8; j++) {
Match:           int rgb = img.getRGB(i, j), bit = getBitValue(b, count);
Match:           rgb = setBitValue(rgb, storageBit, bit);
Match:           img.setRGB(i, j, rgb);
Match:           count++;
Match:           }
Match:  private void saveImage() {
Match:     if(embeddedImage == null) {
Match:        JOptionPane.showMessageDialog(this, "No message has been embedded!", 
Match:          "Nothing to save", JOptionPane.ERROR_MESSAGE);
Match:        return;
Match:    java.io.File f = showFileDialog(false);
Match:    if(f==null)
Match:    return;    
Match:     String name = f.getName();
Match:     String ext = name.substring(name.lastIndexOf(".")+1).toLowerCase();
Match:     if(!ext.equals("png") && !ext.equals("bmp") &&   !ext.equals("dib")) {
Match:           ext = "png";
Match:           f = new java.io.File(f.getAbsolutePath()+".png");
Match:           }
Match:        if(f.exists()) f.delete();
Match:        ImageIO.write(embeddedImage, ext.toUpperCase(), f);
Match:        } catch(Exception ex) {}
Match:  private void resetInterface() {
Match:     message.setText("");
Match:     originalPane.getViewport().removeAll();
Match:     embeddedPane.getViewport().removeAll();
Match:     sourceImage = null;
Match:     embeddedImage = null;
Match:     sp.setDividerLocation(0.5);
Match:     this.validate();
Match:  private int getBitValue(int n, int location) {
Match:     int v = n & (int) Math.round(Math.pow(2, location));
Match:     return v==0?0:1;
Match:  private int setBitValue(int n, int location, int bit) {
Match:     int toggle = (int) Math.pow(2, location), bv = getBitValue(n, location);
Match:     if(bv == bit)
Match:        return n;
Match:     if(bv == 0 && bit == 1)
Match:        n |= toggle;
Match:     else if(bv == 1 && bit == 0)
Match:        n ^= toggle;
Match:     return n;
Match: // public static void main(String arg[]) {
Match: ////     Encryption embedMessage = new Encryption();
Potential hidden RC4 Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: setDividerLocation
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: setLeftComponent
Match: setRightComponent
Match: createTitledBorder
Match: createTitledBorder
Match: setLocationRelativeTo
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Match: showMessageDialog
Match: showMessageDialog
Match: setDividerLocation
Potential hidden DES Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: setDividerLocation
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: setLeftComponent
Match: setRightComponent
Match: createTitledBorder
Match: createTitledBorder
Match: setLocationRelativeTo
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Match: showMessageDialog
Match: showMessageDialog
Match: setDividerLocation
Potential hidden Blowfish Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: getPredefinedCursor
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: setDividerLocation
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: setLeftComponent
Match: setRightComponent
Match: createTitledBorder
Match: createTitledBorder
Match: setLocationRelativeTo
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Match: showMessageDialog
Match: showMessageDialog
Match: setDividerLocation
Potential hidden XOR Encryption detected:
Match: ImageSteganography
Match: EmbedMessage
Match: Encryption
Match: implements
Match: ActionListener
Match: BufferedImage
Match: sourceImage
Match: embeddedImage
Match: JSplitPane
Match: JSplitPane
Match: JSplitPane
Match: HORIZONTAL
Match: JScrollPane
Match: originalPane
Match: JScrollPane
Match: embeddedPane
Match: JScrollPane
Match: Encryption
Match: stegonographic
Match: assembleInterface
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: setBackground
Match: setForeground
Match: getPredefinedCursor
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: setVisible
Match: setDividerLocation
Match: assembleInterface
Match: FlowLayout
Match: getContentPane
Match: BorderLayout
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: GridLayout
Match: JScrollPane
Match: BorderFactory
Match: createTitledBorder
Match: getContentPane
Match: BorderLayout
Match: setLeftComponent
Match: originalPane
Match: setRightComponent
Match: embeddedPane
Match: originalPane
Match: BorderFactory
Match: createTitledBorder
Match: embeddedPane
Match: BorderFactory
Match: createTitledBorder
Match: Steganographed
Match: getContentPane
Match: BorderLayout
Match: actionPerformed
Match: ActionEvent
Match: embedMessage
Match: setVisible
Match: setLocationRelativeTo
Match: resetInterface
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: getSelectedFile
Match: showSaveDialog
Match: JFileChooser
Match: getSelectedFile
Match: showFileDialog
Match: sourceImage
Match: sourceImage
Match: originalPane
Match: getViewport
Match: embedMessage
Match: sourceImage
Match: JOptionPane
Match: showMessageDialog
Match: embeddedImage
Match: sourceImage
Match: getSubimage
Match: sourceImage
Match: sourceImage
Match: embedMessage
Match: embeddedImage
Match: embeddedImage
Match: embeddedPane
Match: getViewport
Match: embedMessage
Match: BufferedImage
Match: messageLength
Match: imageWidth
Match: imageHeight
Match: imageWidth
Match: imageHeight
Match: messageLength
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: embedInteger
Match: messageLength
Match: embedInteger
Match: BufferedImage
Match: storageBit
Match: getBitValue
Match: setBitValue
Match: storageBit
Match: BufferedImage
Match: storageBit
Match: getBitValue
Match: setBitValue
Match: storageBit
Match: embeddedImage
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: showFileDialog
Match: lastIndexOf
Match: toLowerCase
Match: getAbsolutePath
Match: embeddedImage
Match: toUpperCase
Match: resetInterface
Match: originalPane
Match: getViewport
Match: embeddedPane
Match: getViewport
Match: sourceImage
Match: embeddedImage
Match: setDividerLocation
Match: getBitValue
Match: setBitValue
Match: getBitValue
Match: Encryption
Match: embedMessage
Match: Encryption
Potential hidden Triple DES Encryption detected:
Match: getLocalGraphicsEnvironment
Match: setDefaultCloseOperation
Match: setAcceptAllFileFilterUsed
Analyzing: ./DigitalSteganography/src/ImageSteganography/Decryption.java

Classes: {'Decryption'}
Imports: {'javax.swing', 'java.awt', 'java.awt.event', 'javax.imageio', 'java.awt.image'}
Method References: {'java', 'int', 'byte', 'BufferedImage', 'boolean', 'ActionEvent'}
Anomalies detected using Z-Score: {'e': 2.549031817867687, ' ': 7.311997102921235}
Anomalies detected using GESD: {' ': 7.311997102921235}
Anomalies detected using Quantile: {'a': 233, 'e': 422, ' ': 1084, 't': 336, 'n': 226, 'o': 213, 'r': 178, 'i': 233}
Fourier Transform Values: [425649.           8808.15594626   2748.25166381 ...   7495.22983362
   2748.25166381   8808.15594626]
Entropy: 4.157581141669627
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: ImageSteganography
Match: //DecodeMessage
Match: Decryption
Match: implements
Match: ActionListener
Match: BufferedImage
Match: JScrollPane
Match: JScrollPane
Match: Decryption
Match: stegonographic
Match: assembleInterface
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setVisible
Match: setBackground
Match: setForeground
Match: setBackground
Match: setForeground
Match: setBackground
Match: setForeground
Match: assembleInterface
Match: FlowLayout
Match: getContentPane
Match: BorderLayout
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: GridLayout
Match: JScrollPane
Match: BorderFactory
Match: createTitledBorder
Match: setEditable
Match: getContentPane
Match: BorderLayout
Match: BorderFactory
Match: createTitledBorder
Match: Steganographed
Match: getContentPane
Match: BorderLayout
Match: actionPerformed
Match: ActionEvent
Match: decodeMessage
Match: resetInterface
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: getSelectedFile
Match: showSaveDialog
Match: getSelectedFile
Match: showFileDialog
Match: getViewport
Match: printStackTrace
Match: decodeMessage
Match: JOptionPane
Match: showMessageDialog
Match: extractInteger
Match: extractByte
Match: extractInteger
Match: BufferedImage
Match: storageBit
Match: start/maxY
Match: getBitValue
Match: storageBit
Match: setBitValue
Match: extractByte
Match: BufferedImage
Match: storageBit
Match: start/maxY
Match: getBitValue
Match: storageBit
Match: setBitValue
Match: resetInterface
Match: getViewport
Match: getBitValue
Match: setBitValue
Match: getBitValue
Match: Decryption
Match: Decryption
Potential hidden ASCII Encoding detected:
Match: package ImageSteganography;
Match: //DecodeMessage.java
Match:  import java.awt.image.*;
Match:  import javax.swing.*;
Match:  import java.awt.*;
Match:  import java.awt.event.*;
Match:  import javax.imageio.*;
Match:  public class Decryption extends JFrame implements ActionListener
Match:  JButton open = new JButton("Open"), decode = new JButton("Decode"),
Match:     reset = new JButton("Reset");
Match:  JTextArea message = new JTextArea(10,3);
Match:  BufferedImage image = null;
Match:  JScrollPane imagePane = new JScrollPane();
Match:  public Decryption() {
Match:     super("Decode stegonographic message in image");
Match:     assembleInterface();
Match:     this.setSize(800, 600);
Match:     this.setLocationRelativeTo(null);
Match:     this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);   
Match:  //   this.setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().
Match:    //    getMaximumWindowBounds());
Match:     this.setVisible(true);
Match:     open.setBackground(Color.black);
Match:     open.setForeground(Color.WHITE);
Match:     open.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     decode.setBackground(Color.black);
Match:     decode.setForeground(Color.WHITE);
Match:     decode.setFont(new Font("Monaco", Font.BOLD, 20));
Match:     reset.setBackground(Color.black);
Match:     reset.setForeground(Color.WHITE);
Match:     reset.setFont(new Font("Monaco", Font.BOLD, 20));
Match:  private void assembleInterface() {
Match:     JPanel p = new JPanel(new FlowLayout());
Match:     p.add(open);
Match:     p.add(decode);
Match:     p.add(reset);
Match:     this.getContentPane().add(p, BorderLayout.NORTH);
Match:     open.addActionListener(this);
Match:     decode.addActionListener(this);
Match:     reset.addActionListener(this);
Match:     open.setMnemonic('O');
Match:     decode.setMnemonic('D');
Match:     reset.setMnemonic('R');
Match:     p = new JPanel(new GridLayout(1,1));
Match:     p.add(new JScrollPane(message));
Match:     message.setFont(new Font("Arial",Font.BOLD,20));
Match:     p.setBorder(BorderFactory.createTitledBorder("Decoded message"));
Match:     message.setEditable(false);
Match:     this.getContentPane().add(p, BorderLayout.SOUTH);
Match:     imagePane.setBorder(BorderFactory.createTitledBorder("Steganographed Image"));
Match:    this.getContentPane().add(imagePane, BorderLayout.CENTER);
Match:  public void actionPerformed(ActionEvent ae) {
Match:     Object o = ae.getSource();
Match:     if(o == open)
Match:        openImage();
Match:     else if(o == decode)
Match:        decodeMessage();
Match:     else if(o == reset) 
Match:        resetInterface();
Match:  private java.io.File showFileDialog(boolean open) {
Match:     JFileChooser fc = new JFileChooser("Open an image");
Match:     javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
Match:        public boolean accept(java.io.File f) {
Match:           String name = f.getName().toLowerCase();
Match:           return f.isDirectory() ||   name.endsWith(".png") || name.endsWith(".bmp");
Match:           }
Match:        public String getDescription() {
Match:           return "Image (*.png, *.bmp)";
Match:           }
Match:     fc.setAcceptAllFileFilterUsed(false);
Match:     fc.addChoosableFileFilter(ff);
Match:     java.io.File f = null;
Match:     if(open && fc.showOpenDialog(this) == fc.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     else if(!open && fc.showSaveDialog(this) == fc.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     return f;
Match:  private void openImage() {
Match:     java.io.File f = showFileDialog(true);
Match:     try {   
Match:        image = ImageIO.read(f);
Match:        JLabel l = new JLabel(new ImageIcon(image));
Match:       imagePane.getViewport().add(l);
Match:        this.validate();
Match:        } catch(Exception ex) { ex.printStackTrace(); }
Match:  private void decodeMessage() {
Match:      if(image == null){
Match:          JOptionPane.showMessageDialog(null, "first open a picture");
Match:          return;
Match:     int len = extractInteger(image, 0, 0);
Match:     byte b[] = new byte[len];
Match:     for(int i=0; i<len; i++)
Match:        b[i] = extractByte(image, i*8+32, 0);
Match:     message.setText(new String(b));
Match:  private int extractInteger(BufferedImage img, int start, int storageBit) {
Match:    int maxX = img.getWidth(), maxY = img.getHeight(), 
Match:        startX = start/maxY, startY = start - startX*maxY, count=0;
Match:     int length = 0;
Match:     for(int i=startX; i<maxX && count<32; i++) {
Match:        for(int j=startY; j<maxY && count<32; j++) {
Match:           int rgb = img.getRGB(i, j), bit = getBitValue(rgb, storageBit);
Match:           length = setBitValue(length, count, bit);
Match:           count++;
Match:           }
Match:     return length;
Match:  private byte extractByte(BufferedImage img, int start, int storageBit) {
Match:     int maxX = img.getWidth(), maxY = img.getHeight(), 
Match:        startX = start/maxY, startY = start - startX*maxY, count=0;
Match:     byte b = 0;
Match:     for(int i=startX; i<maxX && count<8; i++) {
Match:        for(int j=startY; j<maxY && count<8; j++) {
Match:           int rgb = img.getRGB(i, j), bit = getBitValue(rgb, storageBit);
Match:           b = (byte)setBitValue(b, count, bit);
Match:           count++;
Match:           }
Match:     return b;
Match:  private void resetInterface() {
Match:     message.setText("");
Match:     imagePane.getViewport().removeAll();
Match:     image = null;
Match:     this.validate();
Match:  private int getBitValue(int n, int location) {
Match:     int v = n & (int) Math.round(Math.pow(2, location));
Match:     return v==0?0:1;
Match:  private int setBitValue(int n, int location, int bit) {
Match:     int toggle = (int) Math.pow(2, location), bv = getBitValue(n, location);
Match:     if(bv == bit)
Match:        return n;
Match:     if(bv == 0 && bit == 1)
Match:        n |= toggle;
Match:     else if(bv == 1 && bit == 0)
Match:        n ^= toggle;
Match:     return n;
Match: // public static void main(String arg[]) {
Match: //     Decryption newClass = new Decryption();
Potential hidden RC4 Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: createTitledBorder
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Potential hidden DES Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: createTitledBorder
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Potential hidden Blowfish Encryption detected:
Match: ImageSteganography
Match: assembleInterface
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: assembleInterface
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: createTitledBorder
Match: createTitledBorder
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showMessageDialog
Potential hidden XOR Encryption detected:
Match: ImageSteganography
Match: DecodeMessage
Match: Decryption
Match: implements
Match: ActionListener
Match: BufferedImage
Match: JScrollPane
Match: JScrollPane
Match: Decryption
Match: stegonographic
Match: assembleInterface
Match: setLocationRelativeTo
Match: setDefaultCloseOperation
Match: GraphicsEnvironment
Match: getLocalGraphicsEnvironment
Match: getMaximumWindowBounds
Match: setVisible
Match: setBackground
Match: setForeground
Match: setBackground
Match: setForeground
Match: setBackground
Match: setForeground
Match: assembleInterface
Match: FlowLayout
Match: getContentPane
Match: BorderLayout
Match: addActionListener
Match: addActionListener
Match: addActionListener
Match: setMnemonic
Match: setMnemonic
Match: setMnemonic
Match: GridLayout
Match: JScrollPane
Match: BorderFactory
Match: createTitledBorder
Match: setEditable
Match: getContentPane
Match: BorderLayout
Match: BorderFactory
Match: createTitledBorder
Match: Steganographed
Match: getContentPane
Match: BorderLayout
Match: actionPerformed
Match: ActionEvent
Match: decodeMessage
Match: resetInterface
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: getSelectedFile
Match: showSaveDialog
Match: getSelectedFile
Match: showFileDialog
Match: getViewport
Match: printStackTrace
Match: decodeMessage
Match: JOptionPane
Match: showMessageDialog
Match: extractInteger
Match: extractByte
Match: extractInteger
Match: BufferedImage
Match: storageBit
Match: getBitValue
Match: storageBit
Match: setBitValue
Match: extractByte
Match: BufferedImage
Match: storageBit
Match: getBitValue
Match: storageBit
Match: setBitValue
Match: resetInterface
Match: getViewport
Match: getBitValue
Match: setBitValue
Match: getBitValue
Match: Decryption
Match: Decryption
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Match: getLocalGraphicsEnvironment
Match: setAcceptAllFileFilterUsed
Analyzing: ./DigitalSteganography/src/Coding/HomePage.java

Classes: {'HomePage'}
Imports: {'java.awt.Color', 'TextSteganography.Text_Decryption', 'ImageSteganography.Encryption', 'Audio_Steganography.Decode_Audio', 'Audio_Steganography.Encode_Audio', 'TextSteganography.Text_Encryption', 'ImageSteganography.Decryption'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {' ': 7.570690692230603}
Anomalies detected using GESD: {' ': 7.570690692230603}
Anomalies detected using Quantile: {'a': 983, 'e': 981, ' ': 3442, 'o': 881, 'n': 784, 't': 972, '.': 703}
Fourier Transform Values: [1408917.           21682.65270816   13957.72279789 ...   11628.24616413
   13957.72279789   21682.65270816]
Entropy: 4.388941480935372
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: Steganography
Match: Steganography
Match: ImageSteganography
Match: Decryption
Match: ImageSteganography
Match: Encryption
Match: TextSteganography
Match: Decryption
Match: TextSteganography
Match: Encryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonDecodeAudioActionPerformed
Match: setBackground
Match: BorderFactory
Match: createEtchedBorder
Match: setForeground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: SteganoGraphy
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: getResource
Match: /images/programer
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jLabel2MouseEntered
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Programmed
Match: GroupLayout
Match: jPanel3Layout
Match: GroupLayout
Match: jPanel3Layout
Match: jPanel3Layout
Match: setHorizontalGroup
Match: jPanel3Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel3Layout
Match: setVerticalGroup
Match: jPanel3Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setForeground
Match: BorderFactory
Match: createEmptyBorder
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton5MouseEntered
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton5ActionPerformed
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton6MouseEntered
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton6ActionPerformed
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonEncodeAudioActionPerformed
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton7ActionPerformed
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncodeAudio
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonDecodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jPanel1Layout
Match: createSequentialGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonDecodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jLabel2MouseEntered
Match: MouseEvent
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jButton5MouseEntered
Match: MouseEvent
Match: jButton5MouseEntered
Match: setBackground
Match: jButton5MouseEntered
Match: jButton5ActionPerformed
Match: ActionEvent
Match: jButton5ActionPerformed
Match: Encryption
Match: Encryption
Match: setVisible
Match: jButton5ActionPerformed
Match: jButton6MouseEntered
Match: MouseEvent
Match: jButton6MouseEntered
Match: jButtonEncodeAudio
Match: setBackground
Match: jButton6MouseEntered
Match: jButton6ActionPerformed
Match: ActionEvent
Match: jButton6ActionPerformed
Match: Decryption
Match: Decryption
Match: setVisible
Match: jButton6ActionPerformed
Match: jButton7ActionPerformed
Match: ActionEvent
Match: jButton7ActionPerformed
Match: Encryption
Match: Encryption
Match: setVisible
Match: setLocationRelativeTo
Match: jButton7ActionPerformed
Match: jButton2ActionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: Decryption
Match: Decryption
Match: setVisible
Match: setLocationRelativeTo
Match: jButton2ActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: ActionEvent
Match: jButtonEncodeAudioActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: ActionEvent
Match: jButtonDecodeAudioActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonDecodeAudioActionPerformed
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: modify//GEN
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match: package Coding;
Match: import Audio_Steganography.Decode_Audio;
Match: import Audio_Steganography.Encode_Audio;
Match: import ImageSteganography.Decryption;
Match: import ImageSteganography.Encryption;
Match: import TextSteganography.Text_Decryption;
Match: import TextSteganography.Text_Encryption;
Match: import java.awt.Color;
Match:  * @author Hadi
Match: public class HomePage extends javax.swing.JFrame {
Match:      * Creates new form MainMenu
Match:     public HomePage() {
Match:         initComponents();
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jButton3 = new javax.swing.JButton();
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jButton2 = new javax.swing.JButton();
Match:         jButtonDecodeAudio = new javax.swing.JButton();
Match:         jPanel2 = new javax.swing.JPanel();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jLabel2 = new javax.swing.JLabel();
Match:         jPanel3 = new javax.swing.JPanel();
Match:         jLabel3 = new javax.swing.JLabel();
Match:         jButton5 = new javax.swing.JButton();
Match:         jButton6 = new javax.swing.JButton();
Match:         jButtonEncodeAudio = new javax.swing.JButton();
Match:         jButton7 = new javax.swing.JButton();
Match:         jButton3.setText("jButton1");
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
Match:         jPanel1.setBackground(new java.awt.Color(149, 171, 166));
Match:         jButton2.setFont(new java.awt.Font("Algerian", 1, 30)); // NOI18N
Match:         jButton2.setText("Decode Text");
Match:         jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton2.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton2ActionPerformed(evt);
Match:             }
Match:         });
Match:         jButtonDecodeAudio.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
Match:         jButtonDecodeAudio.setText("Decode Audio");
Match:         jButtonDecodeAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonDecodeAudio.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonDecodeAudioActionPerformed(evt);
Match:             }
Match:         });
Match:         jPanel2.setBackground(new java.awt.Color(160, 0, 0));
Match:         jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.lightGray));
Match:         jPanel2.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
Match:         jLabel1.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Digital SteganoGraphy Project");
Match:         javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
Match:         jPanel2.setLayout(jPanel2Layout);
Match:         jPanel2Layout.setHorizontalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel2Layout.setVerticalGroup(
Match:             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
Match:         );
Match:         jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/programer.jpg"))); // NOI18N
Match:         jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jLabel2MouseEntered(evt);
Match:             }
Match:         });
Match:         jPanel3.setBackground(new java.awt.Color(0, 0, 0));
Match:         jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel3.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel3.setText("Programmed By Aazib Majeed & Moosa Qaisar");
Match:         javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
Match:         jPanel3.setLayout(jPanel3Layout);
Match:         jPanel3Layout.setHorizontalGroup(
Match:             jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel3Layout.setVerticalGroup(
Match:             jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
Match:         );
Match:         jButton5.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
Match:         jButton5.setForeground(new java.awt.Color(32, 32, 32));
Match:         jButton5.setText("Encode Image");
Match:         jButton5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
Match:         jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jButton5MouseEntered(evt);
Match:             }
Match:         });
Match:         jButton5.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton5ActionPerformed(evt);
Match:             }
Match:         });
Match:         jButton6.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
Match:         jButton6.setForeground(new java.awt.Color(23, 23, 23));
Match:         jButton6.setText("Decode Image");
Match:         jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jButton6MouseEntered(evt);
Match:             }
Match:         });
Match:         jButton6.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton6ActionPerformed(evt);
Match:             }
Match:         });
Match:         jButtonEncodeAudio.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
Match:         jButtonEncodeAudio.setText("Encode Audio");
Match:         jButtonEncodeAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonEncodeAudio.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonEncodeAudioActionPerformed(evt);
Match:             }
Match:         });
Match:         jButton7.setFont(new java.awt.Font("Algerian", 1, 30)); // NOI18N
Match:         jButton7.setText("Encode Text");
Match:         jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton7.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton7ActionPerformed(evt);
Match:             }
Match:         });
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addGap(10, 10, 10)
Match:                         .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
Match:                         .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                             .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButtonEncodeAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                         .addGap(18, 18, 18)
Match:                         .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                             .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButtonDecodeAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
Match:                 .addContainerGap())
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                         .addComponent(jLabel2))
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addGap(20, 20, 20)
Match:                         .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
Match:                             .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                         .addGap(18, 18, 18)
Match:                         .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                             .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                         .addGap(18, 18, 18)
Match:                         .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                             .addComponent(jButtonDecodeAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButtonEncodeAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
Match:                 .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(28, 28, 28))
Match:         );
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
Match:     }//GEN-LAST:event_jLabel2MouseEntered
Match:     private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
Match:         jButton2.setBackground(Color.lightGray);
Match:     }//GEN-LAST:event_jButton5MouseEntered
Match:     private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
Match:         Encryption a=new Encryption();
Match:         a.setVisible(true);
Match:     }//GEN-LAST:event_jButton5ActionPerformed
Match:     private void jButton6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseEntered
Match:         jButtonEncodeAudio.setBackground(Color.LIGHT_GRAY);
Match:     }//GEN-LAST:event_jButton6MouseEntered
Match:     private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
Match:         Decryption a=new Decryption();
Match:         a.setVisible(true);
Match:     }//GEN-LAST:event_jButton6ActionPerformed
Match:     private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
Match:         Text_Encryption te = new Text_Encryption();
Match:         te.setVisible(true);
Match:         te.setLocationRelativeTo(null);
Match:     }//GEN-LAST:event_jButton7ActionPerformed
Match:     private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
Match:         Text_Decryption td = new Text_Decryption();
Match:         td.setVisible(true);
Match:         td.setLocationRelativeTo(null);
Match:     }//GEN-LAST:event_jButton2ActionPerformed
Match:     private void jButtonEncodeAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncodeAudioActionPerformed
Match:         Encode_Audio ea = new Encode_Audio();
Match:         ea.setVisible(true);
Match:         ea.setLocationRelativeTo(null);
Match:     }//GEN-LAST:event_jButtonEncodeAudioActionPerformed
Match:     private void jButtonDecodeAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecodeAudioActionPerformed
Match:         Decode_Audio da = new Decode_Audio();
Match:         da.setVisible(true);
Match:         da.setLocationRelativeTo(null);
Match:     }//GEN-LAST:event_jButtonDecodeAudioActionPerformed
Match:      * @param args the command line arguments
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             public void run() {
Match:                 new HomePage().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButton2;
Match:     private javax.swing.JButton jButton3;
Match:     private javax.swing.JButton jButton5;
Match:     private javax.swing.JButton jButton6;
Match:     private javax.swing.JButton jButton7;
Match:     private javax.swing.JButton jButtonDecodeAudio;
Match:     private javax.swing.JButton jButtonEncodeAudio;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel2;
Match:     private javax.swing.JLabel jLabel3;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JPanel jPanel2;
Match:     private javax.swing.JPanel jPanel3;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: jButtonDecodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: ImageSteganography
Match: ImageSteganography
Match: TextSteganography
Match: TextSteganography
Match: SuppressWarnings
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: jButton2ActionPerformed
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: addActionListener
Match: jButtonDecodeAudioActionPerformed
Match: createEtchedBorder
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: /images/programer
Match: addMouseListener
Match: jLabel2MouseEntered
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createEmptyBorder
Match: addMouseListener
Match: jButton5MouseEntered
Match: addActionListener
Match: jButton5ActionPerformed
Match: addMouseListener
Match: jButton6MouseEntered
Match: addActionListener
Match: jButton6ActionPerformed
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: addActionListener
Match: jButtonEncodeAudioActionPerformed
Match: addActionListener
Match: jButton7ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonEncodeAudio
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton6MouseEntered
Match: jButton6MouseEntered
Match: jButtonEncodeAudio
Match: jButton6MouseEntered
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton7ActionPerformed
Match: jButton7ActionPerformed
Match: setLocationRelativeTo
Match: jButton7ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: setLocationRelativeTo
Match: jButton2ActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonDecodeAudioActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: ImageSteganography
Match: ImageSteganography
Match: TextSteganography
Match: TextSteganography
Match: SuppressWarnings
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: jButton2ActionPerformed
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: addActionListener
Match: jButtonDecodeAudioActionPerformed
Match: createEtchedBorder
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: /images/programer
Match: addMouseListener
Match: jLabel2MouseEntered
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createEmptyBorder
Match: addMouseListener
Match: jButton5MouseEntered
Match: addActionListener
Match: jButton5ActionPerformed
Match: addMouseListener
Match: jButton6MouseEntered
Match: addActionListener
Match: jButton6ActionPerformed
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: addActionListener
Match: jButtonEncodeAudioActionPerformed
Match: addActionListener
Match: jButton7ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonEncodeAudio
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton6MouseEntered
Match: jButton6MouseEntered
Match: jButtonEncodeAudio
Match: jButton6MouseEntered
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton7ActionPerformed
Match: jButton7ActionPerformed
Match: setLocationRelativeTo
Match: jButton7ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: setLocationRelativeTo
Match: jButton2ActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonDecodeAudioActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: ImageSteganography
Match: ImageSteganography
Match: TextSteganography
Match: TextSteganography
Match: SuppressWarnings
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: jButton2ActionPerformed
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: addActionListener
Match: jButtonDecodeAudioActionPerformed
Match: createEtchedBorder
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: /images/programer
Match: addMouseListener
Match: jLabel2MouseEntered
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createEmptyBorder
Match: addMouseListener
Match: jButton5MouseEntered
Match: addActionListener
Match: jButton5ActionPerformed
Match: addMouseListener
Match: jButton6MouseEntered
Match: addActionListener
Match: jButton6ActionPerformed
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: addActionListener
Match: jButtonEncodeAudioActionPerformed
Match: addActionListener
Match: jButton7ActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonEncodeAudio
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: ComponentPlacement
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5MouseEntered
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton5ActionPerformed
Match: jButton6MouseEntered
Match: jButton6MouseEntered
Match: jButtonEncodeAudio
Match: jButton6MouseEntered
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton6ActionPerformed
Match: jButton7ActionPerformed
Match: jButton7ActionPerformed
Match: setLocationRelativeTo
Match: jButton7ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: setLocationRelativeTo
Match: jButton2ActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: setLocationRelativeTo
Match: jButtonDecodeAudioActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: Steganography
Match: Steganography
Match: ImageSteganography
Match: Decryption
Match: ImageSteganography
Match: Encryption
Match: TextSteganography
Match: Decryption
Match: TextSteganography
Match: Encryption
Match: initComponents
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setBackground
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: jButtonDecodeAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonDecodeAudioActionPerformed
Match: setBackground
Match: BorderFactory
Match: createEtchedBorder
Match: setForeground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: SteganoGraphy
Match: GroupLayout
Match: jPanel2Layout
Match: GroupLayout
Match: jPanel2Layout
Match: jPanel2Layout
Match: setHorizontalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel2Layout
Match: setVerticalGroup
Match: jPanel2Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: getResource
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jLabel2MouseEntered
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Programmed
Match: GroupLayout
Match: jPanel3Layout
Match: GroupLayout
Match: jPanel3Layout
Match: jPanel3Layout
Match: setHorizontalGroup
Match: jPanel3Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel3Layout
Match: setVerticalGroup
Match: jPanel3Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setForeground
Match: BorderFactory
Match: createEmptyBorder
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton5MouseEntered
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton5ActionPerformed
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton6MouseEntered
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton6ActionPerformed
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: jButtonEncodeAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonEncodeAudioActionPerformed
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton7ActionPerformed
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncodeAudio
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonDecodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jPanel1Layout
Match: createSequentialGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonDecodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncodeAudio
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jLabel2MouseEntered
Match: MouseEvent
Match: jLabel2MouseEntered
Match: jLabel2MouseEntered
Match: jButton5MouseEntered
Match: MouseEvent
Match: jButton5MouseEntered
Match: setBackground
Match: jButton5MouseEntered
Match: jButton5ActionPerformed
Match: ActionEvent
Match: jButton5ActionPerformed
Match: Encryption
Match: Encryption
Match: setVisible
Match: jButton5ActionPerformed
Match: jButton6MouseEntered
Match: MouseEvent
Match: jButton6MouseEntered
Match: jButtonEncodeAudio
Match: setBackground
Match: jButton6MouseEntered
Match: jButton6ActionPerformed
Match: ActionEvent
Match: jButton6ActionPerformed
Match: Decryption
Match: Decryption
Match: setVisible
Match: jButton6ActionPerformed
Match: jButton7ActionPerformed
Match: ActionEvent
Match: jButton7ActionPerformed
Match: Encryption
Match: Encryption
Match: setVisible
Match: setLocationRelativeTo
Match: jButton7ActionPerformed
Match: jButton2ActionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: Decryption
Match: Decryption
Match: setVisible
Match: setLocationRelativeTo
Match: jButton2ActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: ActionEvent
Match: jButtonEncodeAudioActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: ActionEvent
Match: jButtonDecodeAudioActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonDecodeAudioActionPerformed
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: jButtonDecodeAudio
Match: jButtonEncodeAudio
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Match: jButtonDecodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonEncodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: jButtonDecodeAudioActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/Coding/SendEmail.java

Classes: {'SendEmail'}
Imports: {'javax.mail.MessagingException', 'java.util.Properties', 'java.awt.Color', 'javax.mail.Message', 'java.io.IOException', 'javax.mail.internet.InternetAddress', 'javax.mail.PasswordAuthentication', 'javax.mail.Session', 'javax.mail.Transport', 'javax.mail.Multipart', 'javax.mail.internet.MimeMultipart', 'java.io.File', 'javax.swing.JOptionPane', 'javax.swing.JFileChooser', 'javax.mail.internet.MimeBodyPart', 'javax.mail.internet.MimeMessage'}
Method References: {'java', 'String', 'boolean'}
Anomalies detected using Z-Score: {' ': 7.9780012474637205}
Anomalies detected using GESD: {' ': 7.9780012474637205}
Anomalies detected using Quantile: {'a': 1072, 'e': 1074, ' ': 3893, 'o': 726, 'n': 645, 't': 917, '.': 725}
Fourier Transform Values: [1441091.            8225.4977186     9919.19567573 ...   30855.90342999
    9919.19567573    8225.4977186 ]
Entropy: 4.327155650283713
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: IOException
Match: Properties
Match: MessagingException
Match: PasswordAuthentication
Match: InternetAddress
Match: MimeBodyPart
Match: MimeMessage
Match: MimeMultipart
Match: JFileChooser
Match: JOptionPane
Match: initComponents
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: getSelectedFile
Match: showSaveDialog
Match: getSelectedFile
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: JTextField
Match: JTextField
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaBody
Match: jLabelAttachPath
Match: jPasswordFrom
Match: JPasswordField
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setResizable
Match: addWindowListener
Match: WindowAdapter
Match: windowOpened
Match: WindowEvent
Match: formWindowOpened
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextAreaBody
Match: setColumns
Match: jTextAreaBody
Match: Monospaced
Match: jTextAreaBody
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaBody
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: addMouseListener
Match: MouseAdapter
Match: mouseClicked
Match: MouseEvent
Match: jLabelAttachPathMouseClicked
Match: mouseEntered
Match: MouseEvent
Match: jLabelAttachPathMouseEntered
Match: mouseExited
Match: MouseEvent
Match: jLabelAttachPathMouseExited
Match: jPasswordFrom
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jPasswordFrom
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jLabelAttachPath
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jPasswordFrom
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jLabelAttachPath
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jLabelAttachPathMouseEntered
Match: MouseEvent
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: MouseEvent
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: MouseEvent
Match: jLabelAttachPathMouseClicked
Match: showFileDialog
Match: jLabelAttachPath
Match: jLabelAttachPathMouseClicked
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jPasswordFrom
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: showMessageDialog
Match: verification
Match: jButton1ActionPerformed
Match: formWindowOpened
Match: WindowEvent
Match: formWindowOpened
Match: jPasswordFrom
Match: ewjurjykkstpmojh
Match: formWindowOpened
Match: properties
Match: Properties
Match: properties
Match: getProperties
Match: properties
Match: properties
Match: properties
Match: properties
Match: getInstance
Match: properties
Match: Authenticator
Match: PasswordAuthentication
Match: getPasswordAuthentication
Match: PasswordAuthentication
Match: jPasswordFrom
Match: getPassword
Match: MimeMessage
Match: MimeMessage
Match: MimeMessage
Match: InternetAddress
Match: addRecipient
Match: RecipientType
Match: InternetAddress
Match: setSubject
Match: MimeMultipart
Match: MimeBodyPart
Match: attachmentPart
Match: MimeBodyPart
Match: MimeBodyPart
Match: MimeBodyPart
Match: jLabelAttachPath
Match: attachmentPart
Match: attachFile
Match: jTextAreaBody
Match: addBodyPart
Match: addBodyPart
Match: attachmentPart
Match: IOException
Match: setContent
Match: successfully
Match: MessagingException
Match: JOptionPane
Match: showMessageDialog
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: modify//GEN
Match: jLabelAttachPath
Match: JPasswordField
Match: jPasswordFrom
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaBody
Match: JTextField
Match: JTextField
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match: package Coding;
Match: import java.awt.Color;
Match: import java.io.File;
Match: import java.io.IOException;
Match: import java.util.Properties;
Match: import javax.mail.Message;
Match: import javax.mail.MessagingException;
Match: import javax.mail.Multipart;
Match: import javax.mail.PasswordAuthentication;
Match: import javax.mail.Session;
Match: import javax.mail.Transport;
Match: import javax.mail.internet.InternetAddress;
Match: import javax.mail.internet.MimeBodyPart;
Match: import javax.mail.internet.MimeMessage;
Match: import javax.mail.internet.MimeMultipart;
Match: import javax.swing.JFileChooser;
Match: import javax.swing.JOptionPane;
Match:  * @author Hadi
Match: public class SendEmail extends javax.swing.JFrame {
Match:     public SendEmail() {
Match:         initComponents();
Match:      private java.io.File showFileDialog(final boolean open) {
Match:     JFileChooser fc = new JFileChooser("Open a File");
Match:     javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
Match:        public boolean accept(java.io.File f) {
Match:           String name = f.getName().toLowerCase();
Match:           if(open)
Match:              return f.isDirectory() || name.endsWith(".jpg") || name.endsWith(".jpeg") ||
Match:                 name.endsWith(".png") || name.endsWith(".gif") || name.endsWith(".txt") ||
Match:                 name.endsWith(".pdf") || name.endsWith(".mp3");
Match:           return f.isDirectory() || name.endsWith(".png") || name.endsWith(".pdf") ||    name.endsWith(".txt")
Match:                   ||    name.endsWith(".jpeg") ||    name.endsWith(".mp3");
Match:           }
Match:        public String getDescription() {
Match:           if(open)
Match:              return "Image (*.jpg, *.jpeg, *.png, *.gif, *.txt, *.pdf, *.mp3)";
Match:           return "Image (*.png, *.pdf, *.jpeg, *.txt, *.mp3 )";
Match:           }
Match:     fc.setAcceptAllFileFilterUsed(false);
Match:     fc.addChoosableFileFilter(ff);
Match:     java.io.File f = null;
Match:    if(open && fc.showOpenDialog(this) == fc.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     else if(!open && fc.showSaveDialog(this) == fc.APPROVE_OPTION)
Match:        f = fc.getSelectedFile();
Match:     return f;
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jTextFrom = new javax.swing.JTextField();
Match:         jTextTo = new javax.swing.JTextField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jLabel2 = new javax.swing.JLabel();
Match:         jButton1 = new javax.swing.JButton();
Match:         jScrollPane1 = new javax.swing.JScrollPane();
Match:         jTextAreaBody = new javax.swing.JTextArea();
Match:         jLabel3 = new javax.swing.JLabel();
Match:         jLabelAttachPath = new javax.swing.JLabel();
Match:         jPasswordFrom = new javax.swing.JPasswordField();
Match:         jLabel5 = new javax.swing.JLabel();
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jLabel4 = new javax.swing.JLabel();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
Match:         setResizable(false);
Match:         addWindowListener(new java.awt.event.WindowAdapter() {
Match:             public void windowOpened(java.awt.event.WindowEvent evt) {
Match:                 formWindowOpened(evt);
Match:             }
Match:         });
Match:         jTextFrom.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
Match:         jTextTo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel1.setText("From :");
Match:         jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel2.setText("To :");
Match:         jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
Match:         jButton1.setText("Send");
Match:         jButton1.setBorder(null);
Match:         jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton1.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton1ActionPerformed(evt);
Match:             }
Match:         });
Match:         jTextAreaBody.setColumns(20);
Match:         jTextAreaBody.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
Match:         jTextAreaBody.setRows(5);
Match:         jScrollPane1.setViewportView(jTextAreaBody);
Match:         jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel3.setText("Body :");
Match:         jLabelAttachPath.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabelAttachPath.setForeground(new java.awt.Color(0, 0, 255));
Match:         jLabelAttachPath.setText("Attach");
Match:         jLabelAttachPath.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jLabelAttachPath.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseClicked(java.awt.event.MouseEvent evt) {
Match:                 jLabelAttachPathMouseClicked(evt);
Match:             }
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jLabelAttachPathMouseEntered(evt);
Match:             }
Match:             public void mouseExited(java.awt.event.MouseEvent evt) {
Match:                 jLabelAttachPathMouseExited(evt);
Match:             }
Match:         });
Match:         jPasswordFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jLabel5.setText("Password");
Match:         jPanel1.setBackground(new java.awt.Color(0, 51, 51));
Match:         jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
Match:         jLabel4.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel4.setText("Send Email");
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
Match:         );
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
Match:                 .addContainerGap(54, Short.MAX_VALUE)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                         .addComponent(jTextTo, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
Match:                         .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                         .addComponent(jPasswordFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jTextFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(jLabelAttachPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                         .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
Match:                 .addGap(37, 37, 37))
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                 .addGap(32, 32, 32)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jTextFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
Match:                         .addGap(1, 1, 1)
Match:                         .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jPasswordFrom)
Match:                     .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                     .addComponent(jTextTo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(jLabelAttachPath, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addGap(29, 29, 29))
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jLabelAttachPathMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAttachPathMouseEntered
Match:         jLabelAttachPath.setForeground(Color.red);
Match:     }//GEN-LAST:event_jLabelAttachPathMouseEntered
Match:     private void jLabelAttachPathMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAttachPathMouseExited
Match:         jLabelAttachPath.setForeground(Color.blue);
Match:     }//GEN-LAST:event_jLabelAttachPathMouseExited
Match:     private void jLabelAttachPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAttachPathMouseClicked
Match:        java.io.File f = showFileDialog(true);
Match:        if(f==null)
Match:            return;
Match:        else{
Match:            jLabelAttachPath.setText(f.getPath());
Match:     }//GEN-LAST:event_jLabelAttachPathMouseClicked
Match:     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Match:        if(jTextFrom.getText().equals("")|| jTextTo.getText().equals("")
Match:                || jPasswordFrom.getText().equals("")  ) {
Match:            JOptionPane.showMessageDialog(this, "Please Fill All the Form!");
Match:         else if(SendMail()== true)
Match:                 SendMail();
Match:        else
Match:            JOptionPane.showMessageDialog(this, "You Gmail Has 2-Step-verification!"
Match:                    + "please Enter your Gmail App Password instean of Password");
Match:     }//GEN-LAST:event_jButton1ActionPerformed
Match:     private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Match:         jPasswordFrom.setText("ewjurjykkstpmojh"); // Enter Your GmailApp Password
Match:         jTextFrom.setText("contact@gmail.com"); // Enter your gmail
Match:     }//GEN-LAST:event_formWindowOpened
Match:     public boolean SendMail() {
Match:         // Assuming you are sending email from through gmails smtp
Match:         String host = "smtp.gmail.com";
Match:         // Get system properties
Match:         Properties properties = System.getProperties();
Match:         // Setup mail server
Match:         properties.put("mail.smtp.host", host);
Match:         properties.put("mail.smtp.port", "465");
Match:         properties.put("mail.smtp.ssl.enable", "true");
Match:         properties.put("mail.smtp.auth", "true");
Match:         // Get the Session object.// and pass 
Match:         Session session = Session.getInstance(properties, new javax.mail.Authenticator() {
Match:             protected PasswordAuthentication getPasswordAuthentication() {
Match:                 return new PasswordAuthentication(jTextFrom.getText(), String.valueOf(jPasswordFrom.getPassword()));
Match:             }
Match:         });
Match:         //session.setDebug(true);
Match:         try {
Match:             // Create a default MimeMessage object.
Match:             MimeMessage message = new MimeMessage(session);
Match:             // Set From: header field of the header.
Match:             message.setFrom(new InternetAddress(jTextFrom.getText()));
Match:             // Set To: header field of the header.
Match:             message.addRecipient(Message.RecipientType.TO, new InternetAddress(jTextTo.getText()));
Match:             // Set Subject: header field
Match:             message.setSubject("Subject");
Match:             Multipart multipart = new MimeMultipart();
Match:             MimeBodyPart attachmentPart = new MimeBodyPart();
Match:             MimeBodyPart textPart = new MimeBodyPart();
Match:             try {
Match:                 File f =new File(jLabelAttachPath.getText());
Match:                 attachmentPart.attachFile(f);
Match:                 textPart.setText(jTextAreaBody.getText());
Match:                 multipart.addBodyPart(textPart);
Match:                 multipart.addBodyPart(attachmentPart);
Match:             } catch (IOException e) {
Match:             }
Match:             message.setContent(multipart);
Match:             System.out.println("sending...");
Match:             // Send message
Match:             Transport.send(message);
Match:             System.out.println("Sent message successfully....");
Match:         } catch (MessagingException mex) {
Match:             JOptionPane.showMessageDialog(null, "Err");
Match:         return true;
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(SendEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(SendEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(SendEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(SendEmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             @Override
Match:             public void run() {
Match:                 new SendEmail().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButton1;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel2;
Match:     private javax.swing.JLabel jLabel3;
Match:     private javax.swing.JLabel jLabel4;
Match:     private javax.swing.JLabel jLabel5;
Match:     private javax.swing.JLabel jLabelAttachPath;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JPasswordField jPasswordFrom;
Match:     private javax.swing.JScrollPane jScrollPane1;
Match:     private javax.swing.JTextArea jTextAreaBody;
Match:     private javax.swing.JTextField jTextFrom;
Match:     private javax.swing.JTextField jTextTo;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: MessagingException
Match: PasswordAuthentication
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: SuppressWarnings
Match: jLabelAttachPath
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: addActionListener
Match: jButton1ActionPerformed
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: addMouseListener
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: jLabelAttachPath
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPath
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPath
Match: jLabelAttachPathMouseClicked
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: formWindowOpened
Match: formWindowOpened
Match: ewjurjykkstpmojh
Match: formWindowOpened
Match: PasswordAuthentication
Match: getPasswordAuthentication
Match: PasswordAuthentication
Match: jLabelAttachPath
Match: MessagingException
Match: showMessageDialog
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jLabelAttachPath
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: MessagingException
Match: PasswordAuthentication
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: SuppressWarnings
Match: jLabelAttachPath
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: addActionListener
Match: jButton1ActionPerformed
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: addMouseListener
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: jLabelAttachPath
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPath
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPath
Match: jLabelAttachPathMouseClicked
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: formWindowOpened
Match: formWindowOpened
Match: ewjurjykkstpmojh
Match: formWindowOpened
Match: PasswordAuthentication
Match: getPasswordAuthentication
Match: PasswordAuthentication
Match: jLabelAttachPath
Match: MessagingException
Match: showMessageDialog
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jLabelAttachPath
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: MessagingException
Match: PasswordAuthentication
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: SuppressWarnings
Match: jLabelAttachPath
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: addActionListener
Match: jButton1ActionPerformed
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: addMouseListener
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: jLabelAttachPath
Match: ComponentPlacement
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPath
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPath
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPath
Match: jLabelAttachPathMouseClicked
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: showMessageDialog
Match: showMessageDialog
Match: jButton1ActionPerformed
Match: formWindowOpened
Match: formWindowOpened
Match: ewjurjykkstpmojh
Match: formWindowOpened
Match: PasswordAuthentication
Match: getPasswordAuthentication
Match: PasswordAuthentication
Match: jLabelAttachPath
Match: MessagingException
Match: showMessageDialog
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jLabelAttachPath
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: IOException
Match: Properties
Match: MessagingException
Match: PasswordAuthentication
Match: InternetAddress
Match: MimeBodyPart
Match: MimeMessage
Match: MimeMultipart
Match: JFileChooser
Match: JOptionPane
Match: initComponents
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: getSelectedFile
Match: showSaveDialog
Match: getSelectedFile
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: JTextField
Match: JTextField
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaBody
Match: jLabelAttachPath
Match: jPasswordFrom
Match: JPasswordField
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setResizable
Match: addWindowListener
Match: WindowAdapter
Match: windowOpened
Match: WindowEvent
Match: formWindowOpened
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextAreaBody
Match: setColumns
Match: jTextAreaBody
Match: Monospaced
Match: jTextAreaBody
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaBody
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: jLabelAttachPath
Match: addMouseListener
Match: MouseAdapter
Match: mouseClicked
Match: MouseEvent
Match: jLabelAttachPathMouseClicked
Match: mouseEntered
Match: MouseEvent
Match: jLabelAttachPathMouseEntered
Match: mouseExited
Match: MouseEvent
Match: jLabelAttachPathMouseExited
Match: jPasswordFrom
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jPasswordFrom
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jLabelAttachPath
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jPasswordFrom
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jLabelAttachPath
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jLabelAttachPathMouseEntered
Match: MouseEvent
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: MouseEvent
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPath
Match: setForeground
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: MouseEvent
Match: jLabelAttachPathMouseClicked
Match: showFileDialog
Match: jLabelAttachPath
Match: jLabelAttachPathMouseClicked
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jPasswordFrom
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: showMessageDialog
Match: verification
Match: jButton1ActionPerformed
Match: formWindowOpened
Match: WindowEvent
Match: formWindowOpened
Match: jPasswordFrom
Match: ewjurjykkstpmojh
Match: formWindowOpened
Match: properties
Match: Properties
Match: properties
Match: getProperties
Match: properties
Match: properties
Match: properties
Match: properties
Match: getInstance
Match: properties
Match: Authenticator
Match: PasswordAuthentication
Match: getPasswordAuthentication
Match: PasswordAuthentication
Match: jPasswordFrom
Match: getPassword
Match: MimeMessage
Match: MimeMessage
Match: MimeMessage
Match: InternetAddress
Match: addRecipient
Match: RecipientType
Match: InternetAddress
Match: setSubject
Match: MimeMultipart
Match: MimeBodyPart
Match: attachmentPart
Match: MimeBodyPart
Match: MimeBodyPart
Match: MimeBodyPart
Match: jLabelAttachPath
Match: attachmentPart
Match: attachFile
Match: jTextAreaBody
Match: addBodyPart
Match: addBodyPart
Match: attachmentPart
Match: IOException
Match: setContent
Match: successfully
Match: MessagingException
Match: JOptionPane
Match: showMessageDialog
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: jLabelAttachPath
Match: JPasswordField
Match: jPasswordFrom
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaBody
Match: JTextField
Match: JTextField
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setAcceptAllFileFilterUsed
Match: setDefaultCloseOperation
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseEntered
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseExited
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseClicked
Match: jLabelAttachPathMouseClicked
Match: getPasswordAuthentication
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/Coding/SplashScreenFrame.java

Classes: {'SplashThread', 'SplashScreenFrame'}
Imports: set()
Method References: set()
Anomalies detected using Z-Score: {' ': 7.853469042537675}
Anomalies detected using GESD: {' ': 7.853469042537675}
Anomalies detected using Quantile: {'a': 333, 'e': 251, ' ': 1160, 'o': 206, 'n': 194, 'r': 173, 't': 189, '.': 184}
Fourier Transform Values: [392838.           8916.7070499    6440.321238   ...  14081.08785884
   6440.321238     8916.7070499 ]
Entropy: 4.268340044805349
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashThread
Match: SplashScreenFrame
Match: initComponents
Match: SplashThread
Match: SplashThread
Match: jProgressBar1
Match: SplashScreenFrame
Match: setVisible
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jProgressBar1
Match: JProgressBar
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setUndecorated
Match: setResizable
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Encryption
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: getResource
Match: /images/programer
Match: jProgressBar1
Match: setBackground
Match: jProgressBar1
Match: jProgressBar1
Match: setForeground
Match: jProgressBar1
Match: setMaximum
Match: jProgressBar1
Match: setStringPainted
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: addComponent
Match: jProgressBar1
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addComponent
Match: jProgressBar1
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setLocationRelativeTo
Match: initComponents
Match: declaration
Match: modify//GEN
Match: JProgressBar
Match: jProgressBar1
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match: package Coding;
Match: public class SplashScreenFrame extends javax.swing.JFrame {
Match:      * Creates new form SplashScreenFrame
Match:     private SplashThread sp;
Match:     public SplashScreenFrame() {
Match:         initComponents();
Match:         sp = new SplashThread();
Match:         sp.start();
Match:    class SplashThread extends Thread{ 
Match:         public void run(){
Match:         try
Match:             for(int i = 0 ; i<=50 ; i++)
Match:             {
Match:                 Thread.sleep(50);
Match:                 jProgressBar1.setValue(i);
Match:             }
Match:             SplashScreenFrame.this.dispose();
Match:             HomePage home = new HomePage();
Match:             home.setVisible(true);
Match:             
Match:         catch(Exception e)
Match:           
Match:                 }
Match:                  
Match:             } 
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jLabel2 = new javax.swing.JLabel();
Match:         jProgressBar1 = new javax.swing.JProgressBar();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
Match:         setUndecorated(true);
Match:         setResizable(false);
Match:         jPanel1.setBackground(new java.awt.Color(29, 29, 29));
Match:         jLabel1.setFont(new java.awt.Font("Sitka Banner", 1, 36)); // NOI18N
Match:         jLabel1.setForeground(new java.awt.Color(254, 254, 254));
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Message Encryption");
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                 .addContainerGap())
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addGap(26, 26, 26)
Match:                 .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addContainerGap(22, Short.MAX_VALUE))
Match:         );
Match:         jLabel2.setForeground(new java.awt.Color(175, 175, 175));
Match:         jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/programer.jpg"))); // NOI18N
Match:         jProgressBar1.setBackground(new java.awt.Color(255, 255, 255));
Match:         jProgressBar1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
Match:         jProgressBar1.setForeground(new java.awt.Color(51, 51, 255));
Match:         jProgressBar1.setMaximum(50);
Match:         jProgressBar1.setStringPainted(true);
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                     .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
Match:                     .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addContainerGap())
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jLabel2)
Match:                 .addGap(34, 34, 34)
Match:                 .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addContainerGap(51, Short.MAX_VALUE))
Match:         );
Match:         setSize(new java.awt.Dimension(622, 467));
Match:         setLocationRelativeTo(null);
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel2;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JProgressBar jProgressBar1;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden RC4 Encryption detected:
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setHorizontalAlignment
Match: /images/programer
Match: setStringPainted
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setLocationRelativeTo
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setHorizontalAlignment
Match: /images/programer
Match: setStringPainted
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setLocationRelativeTo
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setHorizontalAlignment
Match: /images/programer
Match: setStringPainted
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: setLocationRelativeTo
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: SplashThread
Match: SplashScreenFrame
Match: initComponents
Match: SplashThread
Match: SplashThread
Match: jProgressBar1
Match: SplashScreenFrame
Match: setVisible
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jProgressBar1
Match: JProgressBar
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setUndecorated
Match: setResizable
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Encryption
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: getResource
Match: jProgressBar1
Match: setBackground
Match: jProgressBar1
Match: jProgressBar1
Match: setForeground
Match: jProgressBar1
Match: setMaximum
Match: jProgressBar1
Match: setStringPainted
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: addComponent
Match: jProgressBar1
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addComponent
Match: jProgressBar1
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setLocationRelativeTo
Match: initComponents
Match: declaration
Match: JProgressBar
Match: jProgressBar1
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Analyzing: ./DigitalSteganography/src/Coding/Main.java

Classes: {'Main'}
Imports: set()
Method References: {'String'}
Anomalies detected using Z-Score: {' ': 6.923051872837642}
Anomalies detected using GESD: {' ': 6.923051872837642}
Anomalies detected using Quantile: {'a': 97, 'e': 119, ' ': 436, 'o': 72, 'l': 81}
Fourier Transform Values: [138363.           3439.33038024   6967.71537153 ...   3203.63432199
   6967.71537153   3439.33038024]
Entropy: 3.958025675710089
No Steganography Detected.
Potential hidden Base64 Encoding detected:
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: SplashScreenFrame
Match: InstantiationException
Match: SplashScreenFrame
Match: IllegalAccessException
Match: SplashScreenFrame
Match: UnsupportedLookAndFeelException
Match: SplashScreenFrame
Match: EventQueue
Match: invokeLater
Match: setVisible
Potential hidden ASCII Encoding detected:
Match: package Coding;
Match: public class Main {
Match:     public static void main(String arg[]) {
Match:            /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(SplashScreenFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(SplashScreenFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(SplashScreenFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(SplashScreenFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             @Override
Match:             public void run() {
Match:                 new LoginForm().setVisible(true);
Match:             }
Match:         });
Potential hidden AES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: SplashScreenFrame
Match: InstantiationException
Match: SplashScreenFrame
Match: IllegalAccessException
Match: SplashScreenFrame
Match: UnsupportedLookAndFeelException
Match: SplashScreenFrame
Potential hidden DES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: SplashScreenFrame
Match: InstantiationException
Match: SplashScreenFrame
Match: IllegalAccessException
Match: SplashScreenFrame
Match: UnsupportedLookAndFeelException
Match: SplashScreenFrame
Potential hidden Blowfish Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: SplashScreenFrame
Match: InstantiationException
Match: SplashScreenFrame
Match: IllegalAccessException
Match: SplashScreenFrame
Match: UnsupportedLookAndFeelException
Match: SplashScreenFrame
Potential hidden XOR Encryption detected:
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: SplashScreenFrame
Match: InstantiationException
Match: SplashScreenFrame
Match: IllegalAccessException
Match: SplashScreenFrame
Match: UnsupportedLookAndFeelException
Match: SplashScreenFrame
Match: EventQueue
Match: invokeLater
Match: setVisible
Potential hidden Triple DES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/Coding/LoginForm.java

Classes: {'LoginForm'}
Imports: {'javax.swing.BorderFactory', 'java.awt.Color', 'javax.swing.border.Border', 'java.awt.event.KeyEvent', 'javax.swing.JOptionPane'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {'e': 2.220930410944882, ' ': 7.81712956661228}
Anomalies detected using GESD: {' ': 7.81712956661228}
Anomalies detected using Quantile: {'a': 881, 'e': 1133, ' ': 3489, 'o': 748, 'n': 633, 'r': 488, 't': 883, '.': 591, 's': 474}
Fourier Transform Values: [1332520.           30299.23097568    1819.34750633 ...    7256.27876514
    1819.34750633   30299.23097568]
Entropy: 4.342606962933164
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: BorderFactory
Match: JOptionPane
Match: MyAppPassword
Match: initComponents
Match: setLocationRelativeTo
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jTextUserName
Match: JTextField
Match: JPasswordField
Match: jSeparator1
Match: JSeparator
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setUndecorated
Match: setResizable
Match: addWindowListener
Match: WindowAdapter
Match: windowOpened
Match: WindowEvent
Match: formWindowOpened
Match: setBackground
Match: BorderFactory
Match: createLineBorder
Match: jTextUserName
Match: setBackground
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserName
Match: jTextUserName
Match: addFocusListener
Match: FocusAdapter
Match: focusGained
Match: FocusEvent
Match: jTextUserNameFocusGained
Match: FocusEvent
Match: jTextUserNameFocusLost
Match: jTextUserName
Match: addKeyListener
Match: KeyAdapter
Match: jTextUserNameKeyTyped
Match: setBackground
Match: setForeground
Match: addFocusListener
Match: FocusAdapter
Match: focusGained
Match: FocusEvent
Match: jPasswordFocusGained
Match: FocusEvent
Match: jPasswordFocusLost
Match: addKeyListener
Match: KeyAdapter
Match: jPasswordKeyTyped
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: setBackground
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton1MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jButton1MouseExited
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: setBackground
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton2MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jButton2MouseExited
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: addMouseListener
Match: MouseAdapter
Match: mouseClicked
Match: MouseEvent
Match: jLabel7MouseClicked
Match: mouseEntered
Match: MouseEvent
Match: jLabel7MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jLabel7MouseExited
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jSeparator1
Match: addContainerGap
Match: jPanel1Layout
Match: createSequentialGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addComponent
Match: jTextUserName
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jSeparator1
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jTextUserName
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addContainerGap
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jTextUserNameFocusGained
Match: FocusEvent
Match: jTextUserNameFocusGained
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: FocusEvent
Match: jTextUserNameFocusLost
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: getKeyChar
Match: jTextUserName
Match: jTextUserNameKeyTyped
Match: jPasswordFocusGained
Match: FocusEvent
Match: jPasswordFocusGained
Match: setForeground
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: FocusEvent
Match: jPasswordFocusLost
Match: setForeground
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: jPasswordKeyTyped
Match: getKeyChar
Match: jLoginFormActionPerformed
Match: jPasswordKeyTyped
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextUserName
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: setVisible
Match: jTextUserName
Match: jButton1ActionPerformed
Match: jButton2ActionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jLabel7MouseClicked
Match: MouseEvent
Match: jLabel7MouseClicked
Match: JOptionPane
Match: showMessageDialog
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: MouseEvent
Match: jLabel7MouseEntered
Match: setForeground
Match: BorderFactory
Match: createMatteBorder
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: MouseEvent
Match: jLabel7MouseExited
Match: setForeground
Match: jLabel7MouseExited
Match: jButton1MouseEntered
Match: MouseEvent
Match: jButton1MouseEntered
Match: setForeground
Match: setBackground
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: MouseEvent
Match: jButton1MouseExited
Match: setForeground
Match: setBackground
Match: jButton1MouseExited
Match: jButton2MouseEntered
Match: MouseEvent
Match: jButton2MouseEntered
Match: setForeground
Match: setBackground
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: MouseEvent
Match: jButton2MouseExited
Match: setForeground
Match: setBackground
Match: jButton2MouseExited
Match: formWindowOpened
Match: WindowEvent
Match: formWindowOpened
Match: MyAppPassword
Match: formWindowOpened
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: modify//GEN
Match: JPasswordField
Match: JSeparator
Match: jSeparator1
Match: JTextField
Match: jTextUserName
Match: declaration//GEN
Potential hidden ASCII Encoding detected:
Match: package Coding;
Match: import java.awt.Color;
Match: import java.awt.event.KeyEvent;
Match: import javax.swing.BorderFactory;
Match: import javax.swing.JOptionPane;
Match: import javax.swing.border.Border;
Match: public class LoginForm extends javax.swing.JFrame {
Match:    String MyAppPassword = "";
Match:     public LoginForm() {
Match:         initComponents();
Match:         this.setLocationRelativeTo(null);
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jTextUserName = new javax.swing.JTextField();
Match:         jPassword = new javax.swing.JPasswordField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jSeparator1 = new javax.swing.JSeparator();
Match:         jButton1 = new javax.swing.JButton();
Match:         jButton2 = new javax.swing.JButton();
Match:         jLabel7 = new javax.swing.JLabel();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
Match:         setUndecorated(true);
Match:         setResizable(false);
Match:         addWindowListener(new java.awt.event.WindowAdapter() {
Match:             public void windowOpened(java.awt.event.WindowEvent evt) {
Match:                 formWindowOpened(evt);
Match:             }
Match:         });
Match:         jPanel1.setBackground(new java.awt.Color(19, 22, 29));
Match:         jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4));
Match:         jTextUserName.setBackground(new java.awt.Color(50, 50, 50));
Match:         jTextUserName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jTextUserName.setForeground(new java.awt.Color(193, 193, 193));
Match:         jTextUserName.setText("username");
Match:         jTextUserName.addFocusListener(new java.awt.event.FocusAdapter() {
Match:             public void focusGained(java.awt.event.FocusEvent evt) {
Match:                 jTextUserNameFocusGained(evt);
Match:             }
Match:             public void focusLost(java.awt.event.FocusEvent evt) {
Match:                 jTextUserNameFocusLost(evt);
Match:             }
Match:         });
Match:         jTextUserName.addKeyListener(new java.awt.event.KeyAdapter() {
Match:             public void keyTyped(java.awt.event.KeyEvent evt) {
Match:                 jTextUserNameKeyTyped(evt);
Match:             }
Match:         });
Match:         jPassword.setBackground(new java.awt.Color(52, 52, 52));
Match:         jPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
Match:         jPassword.setForeground(new java.awt.Color(222, 217, 217));
Match:         jPassword.setText("password");
Match:         jPassword.addFocusListener(new java.awt.event.FocusAdapter() {
Match:             public void focusGained(java.awt.event.FocusEvent evt) {
Match:                 jPasswordFocusGained(evt);
Match:             }
Match:             public void focusLost(java.awt.event.FocusEvent evt) {
Match:                 jPasswordFocusLost(evt);
Match:             }
Match:         });
Match:         jPassword.addKeyListener(new java.awt.event.KeyAdapter() {
Match:             public void keyTyped(java.awt.event.KeyEvent evt) {
Match:                 jPasswordKeyTyped(evt);
Match:             }
Match:         });
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
Match:         jLabel1.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Login to System ");
Match:         jButton1.setBackground(new java.awt.Color(251, 251, 251));
Match:         jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton1.setForeground(new java.awt.Color(4, 5, 21));
Match:         jButton1.setText("Login");
Match:         jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jButton1MouseEntered(evt);
Match:             }
Match:             public void mouseExited(java.awt.event.MouseEvent evt) {
Match:                 jButton1MouseExited(evt);
Match:             }
Match:         });
Match:         jButton1.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton1ActionPerformed(evt);
Match:             }
Match:         });
Match:         jButton2.setBackground(new java.awt.Color(255, 255, 255));
Match:         jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButton2.setForeground(new java.awt.Color(6, 10, 25));
Match:         jButton2.setText("Cancel");
Match:         jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jButton2MouseEntered(evt);
Match:             }
Match:             public void mouseExited(java.awt.event.MouseEvent evt) {
Match:                 jButton2MouseExited(evt);
Match:             }
Match:         });
Match:         jButton2.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButton2ActionPerformed(evt);
Match:             }
Match:         });
Match:         jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
Match:         jLabel7.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel7.setText("Click here to see the Password");
Match:         jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
Match:             public void mouseClicked(java.awt.event.MouseEvent evt) {
Match:                 jLabel7MouseClicked(evt);
Match:             }
Match:             public void mouseEntered(java.awt.event.MouseEvent evt) {
Match:                 jLabel7MouseEntered(evt);
Match:             }
Match:             public void mouseExited(java.awt.event.MouseEvent evt) {
Match:                 jLabel7MouseExited(evt);
Match:             }
Match:         });
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap(48, Short.MAX_VALUE)
Match:                 .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(47, 47, 47))
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jSeparator1)
Match:                 .addContainerGap())
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addGap(84, 84, 84)
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addComponent(jPassword)
Match:                     .addComponent(jTextUserName)
Match:                     .addGroup(jPanel1Layout.createSequentialGroup()
Match:                         .addGap(39, 39, 39)
Match:                         .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
Match:                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(jPanel1Layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(18, 18, 18)
Match:                 .addComponent(jTextUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                 .addComponent(jPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addGap(17, 17, 17)
Match:                 .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                     .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addGap(29, 29, 29)
Match:                 .addComponent(jLabel7)
Match:                 .addContainerGap(26, Short.MAX_VALUE))
Match:         );
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jTextUserNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextUserNameFocusGained
Match:         if(jTextUserName.getText().trim().equals("username") || jTextUserName.getText().trim().equals("Password And User Not Matching")){
Match:             jTextUserName.setText("");
Match:             jTextUserName.setForeground(Color.white);
Match:     }//GEN-LAST:event_jTextUserNameFocusGained
Match:     private void jTextUserNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextUserNameFocusLost
Match:         if(jTextUserName.getText().trim().equals("")||
Match:             jTextUserName.getText().trim().equals("username")){
Match:             jTextUserName.setText("username");
Match:             jTextUserName.setForeground(new Color(153,153,153,153));
Match:     }//GEN-LAST:event_jTextUserNameFocusLost
Match:     private void jTextUserNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextUserNameKeyTyped
Match:         char num = evt.getKeyChar();
Match:         if(num == KeyEvent.VK_ENTER)
Match:         jTextUserName.nextFocus();
Match:     }//GEN-LAST:event_jTextUserNameKeyTyped
Match:     private void jPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordFocusGained
Match:         if(jPassword.getText().equals("password")){
Match:             jPassword.setText("");
Match:             jPassword.setForeground(Color.white);
Match:     }//GEN-LAST:event_jPasswordFocusGained
Match:     private void jPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordFocusLost
Match:         if(jPassword.getText().equals("")||
Match:             jPassword.getText().equals("password")){
Match:             jPassword.setText("password");
Match:             jPassword.setForeground(new Color(153,153,153,153));
Match:     }//GEN-LAST:event_jPasswordFocusLost
Match:     private void jPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordKeyTyped
Match: //        char num = evt.getKeyChar();
Match: //        if(num == KeyEvent.VK_ENTER)
Match: //        jLoginFormActionPerformed(null);
Match:     }//GEN-LAST:event_jPasswordKeyTyped
Match:     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Match:         if(jTextUserName.getText().equals("admin") && jPassword.getText().equals("admin")){
Match:             SplashScreenFrame sc = new SplashScreenFrame();
Match:             this.dispose();
Match:             sc.setVisible(true);
Match:            
Match:         else
Match:             jTextUserName.setText("Password And User Not Matching");
Match:     }//GEN-LAST:event_jButton1ActionPerformed
Match:     private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
Match:         System.exit(0);
Match:     }//GEN-LAST:event_jButton2ActionPerformed
Match:     private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
Match:         JOptionPane.showMessageDialog(this, "The Password for user 'Admin' is '123'");
Match:     }//GEN-LAST:event_jLabel7MouseClicked
Match:     private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
Match:         jLabel7.setForeground(Color.red);
Match:         Border border = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.red);
Match:         jLabel7.setBorder(border);
Match:     }//GEN-LAST:event_jLabel7MouseEntered
Match:     private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseExited
Match:         jLabel7.setForeground(Color.white);
Match:         jLabel7.setBorder(null);
Match:     }//GEN-LAST:event_jLabel7MouseExited
Match:     private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
Match:         jButton1.setForeground(Color.WHITE);
Match:         jButton1.setBackground(Color.black);
Match:     }//GEN-LAST:event_jButton1MouseEntered
Match:     private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
Match:         jButton1.setForeground(Color.BLACK);
Match:         jButton1.setBackground(new Color(251,251,251));
Match:     }//GEN-LAST:event_jButton1MouseExited
Match:     private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
Match:         jButton2.setForeground(Color.WHITE);
Match:         jButton2.setBackground(Color.black);
Match:     }//GEN-LAST:event_jButton2MouseEntered
Match:     private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
Match:         jButton2.setForeground(Color.BLACK);
Match:         jButton2.setBackground(new Color(251,251,251));
Match:     }//GEN-LAST:event_jButton2MouseExited
Match:     private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Match:         jPassword.setText(MyAppPassword);
Match:     }//GEN-LAST:event_formWindowOpened
Match:      * @param args the command line arguments
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             public void run() {
Match:                 new LoginForm().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButton1;
Match:     private javax.swing.JButton jButton2;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel7;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JPasswordField jPassword;
Match:     private javax.swing.JSeparator jSeparator1;
Match:     private javax.swing.JTextField jTextUserName;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: createLineBorder
Match: addFocusListener
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: addFocusListener
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: setHorizontalAlignment
Match: addMouseListener
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: addActionListener
Match: jButton1ActionPerformed
Match: addMouseListener
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: addActionListener
Match: jButton2ActionPerformed
Match: setHorizontalAlignment
Match: addMouseListener
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: jPasswordKeyTyped
Match: jLoginFormActionPerformed
Match: jPasswordKeyTyped
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: jButton1ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jLabel7MouseClicked
Match: jLabel7MouseClicked
Match: showMessageDialog
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseEntered
Match: createMatteBorder
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: formWindowOpened
Match: formWindowOpened
Match: formWindowOpened
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: createLineBorder
Match: addFocusListener
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: addFocusListener
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: setHorizontalAlignment
Match: addMouseListener
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: addActionListener
Match: jButton1ActionPerformed
Match: addMouseListener
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: addActionListener
Match: jButton2ActionPerformed
Match: setHorizontalAlignment
Match: addMouseListener
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: jPasswordKeyTyped
Match: jLoginFormActionPerformed
Match: jPasswordKeyTyped
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: jButton1ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jLabel7MouseClicked
Match: jLabel7MouseClicked
Match: showMessageDialog
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseEntered
Match: createMatteBorder
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: formWindowOpened
Match: formWindowOpened
Match: formWindowOpened
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: setDefaultCloseOperation
Match: addWindowListener
Match: formWindowOpened
Match: createLineBorder
Match: addFocusListener
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: addFocusListener
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: setHorizontalAlignment
Match: addMouseListener
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: addActionListener
Match: jButton1ActionPerformed
Match: addMouseListener
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: addActionListener
Match: jButton2ActionPerformed
Match: setHorizontalAlignment
Match: addMouseListener
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createSequentialGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: jPasswordKeyTyped
Match: jLoginFormActionPerformed
Match: jPasswordKeyTyped
Match: jButton1ActionPerformed
Match: jButton1ActionPerformed
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: jButton1ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jLabel7MouseClicked
Match: jLabel7MouseClicked
Match: showMessageDialog
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: jLabel7MouseEntered
Match: createMatteBorder
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jLabel7MouseExited
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton1MouseExited
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: jButton2MouseExited
Match: formWindowOpened
Match: formWindowOpened
Match: formWindowOpened
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: BorderFactory
Match: JOptionPane
Match: MyAppPassword
Match: initComponents
Match: setLocationRelativeTo
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jTextUserName
Match: JTextField
Match: JPasswordField
Match: jSeparator1
Match: JSeparator
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setUndecorated
Match: setResizable
Match: addWindowListener
Match: WindowAdapter
Match: windowOpened
Match: WindowEvent
Match: formWindowOpened
Match: setBackground
Match: BorderFactory
Match: createLineBorder
Match: jTextUserName
Match: setBackground
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserName
Match: jTextUserName
Match: addFocusListener
Match: FocusAdapter
Match: focusGained
Match: FocusEvent
Match: jTextUserNameFocusGained
Match: FocusEvent
Match: jTextUserNameFocusLost
Match: jTextUserName
Match: addKeyListener
Match: KeyAdapter
Match: jTextUserNameKeyTyped
Match: setBackground
Match: setForeground
Match: addFocusListener
Match: FocusAdapter
Match: focusGained
Match: FocusEvent
Match: jPasswordFocusGained
Match: FocusEvent
Match: jPasswordFocusLost
Match: addKeyListener
Match: KeyAdapter
Match: jPasswordKeyTyped
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: setBackground
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton1MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jButton1MouseExited
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: setBackground
Match: setForeground
Match: addMouseListener
Match: MouseAdapter
Match: mouseEntered
Match: MouseEvent
Match: jButton2MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jButton2MouseExited
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: addMouseListener
Match: MouseAdapter
Match: mouseClicked
Match: MouseEvent
Match: jLabel7MouseClicked
Match: mouseEntered
Match: MouseEvent
Match: jLabel7MouseEntered
Match: mouseExited
Match: MouseEvent
Match: jLabel7MouseExited
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: jSeparator1
Match: addContainerGap
Match: jPanel1Layout
Match: createSequentialGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addComponent
Match: jTextUserName
Match: jPanel1Layout
Match: createSequentialGroup
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: jPanel1Layout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jSeparator1
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jTextUserName
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: addContainerGap
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: initComponents
Match: jTextUserNameFocusGained
Match: FocusEvent
Match: jTextUserNameFocusGained
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusLost
Match: FocusEvent
Match: jTextUserNameFocusLost
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: jTextUserName
Match: setForeground
Match: jTextUserNameFocusLost
Match: jTextUserNameKeyTyped
Match: jTextUserNameKeyTyped
Match: getKeyChar
Match: jTextUserName
Match: jTextUserNameKeyTyped
Match: jPasswordFocusGained
Match: FocusEvent
Match: jPasswordFocusGained
Match: setForeground
Match: jPasswordFocusGained
Match: jPasswordFocusLost
Match: FocusEvent
Match: jPasswordFocusLost
Match: setForeground
Match: jPasswordFocusLost
Match: jPasswordKeyTyped
Match: jPasswordKeyTyped
Match: getKeyChar
Match: jLoginFormActionPerformed
Match: jPasswordKeyTyped
Match: jButton1ActionPerformed
Match: ActionEvent
Match: jButton1ActionPerformed
Match: jTextUserName
Match: SplashScreenFrame
Match: SplashScreenFrame
Match: setVisible
Match: jTextUserName
Match: jButton1ActionPerformed
Match: jButton2ActionPerformed
Match: ActionEvent
Match: jButton2ActionPerformed
Match: jButton2ActionPerformed
Match: jLabel7MouseClicked
Match: MouseEvent
Match: jLabel7MouseClicked
Match: JOptionPane
Match: showMessageDialog
Match: jLabel7MouseClicked
Match: jLabel7MouseEntered
Match: MouseEvent
Match: jLabel7MouseEntered
Match: setForeground
Match: BorderFactory
Match: createMatteBorder
Match: jLabel7MouseEntered
Match: jLabel7MouseExited
Match: MouseEvent
Match: jLabel7MouseExited
Match: setForeground
Match: jLabel7MouseExited
Match: jButton1MouseEntered
Match: MouseEvent
Match: jButton1MouseEntered
Match: setForeground
Match: setBackground
Match: jButton1MouseEntered
Match: jButton1MouseExited
Match: MouseEvent
Match: jButton1MouseExited
Match: setForeground
Match: setBackground
Match: jButton1MouseExited
Match: jButton2MouseEntered
Match: MouseEvent
Match: jButton2MouseEntered
Match: setForeground
Match: setBackground
Match: jButton2MouseEntered
Match: jButton2MouseExited
Match: MouseEvent
Match: jButton2MouseExited
Match: setForeground
Match: setBackground
Match: jButton2MouseExited
Match: formWindowOpened
Match: WindowEvent
Match: formWindowOpened
Match: MyAppPassword
Match: formWindowOpened
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: JPasswordField
Match: JSeparator
Match: jSeparator1
Match: JTextField
Match: jTextUserName
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: setDefaultCloseOperation
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jTextUserNameFocusGained
Match: jLoginFormActionPerformed
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/Audio_Steganography/AudioPlayer.java

Classes: {'AudioPlayer'}
Imports: {'javax.sound.sampled.LineListener', 'java.io.IOException', 'javax.sound.sampled.AudioInputStream', 'javax.sound.sampled.DataLine', 'javax.sound.sampled.LineEvent', 'javax.sound.sampled.UnsupportedAudioFileException', 'java.io.File', 'javax.sound.sampled.AudioFormat', 'javax.sound.sampled.Clip', 'javax.sound.sampled.LineUnavailableException', 'javax.sound.sampled.AudioSystem'}
Method References: {'String', 'LineEvent'}
Anomalies detected using Z-Score: {'a': 2.004228008472042, 'e': 2.5337432576790784, ' ': 3.109303311164987, 'i': 2.0963176170297877}
Anomalies detected using GESD: {}
Anomalies detected using Quantile: {'a': 126, 'e': 149, ' ': 174, 'i': 130}
Fourier Transform Values: [177886.           6452.87512889   8625.71710489 ...   1201.97243192
   8625.71710489   6452.87512889]
Entropy: 4.17518573851681
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: Steganography
Match: IOException
Match: AudioFormat
Match: AudioInputStream
Match: AudioSystem
Match: LineListener
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: AudioPlayer
Match: implements
Match: LineListener
Match: playCompleted
Match: audioFilePath
Match: IOException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: audioFilePath
Match: UnsupportedAudioFileException
Match: IOException
Match: LineUnavailableException
Match: audioFilePath
Match: AudioInputStream
Match: audioStream
Match: AudioSystem
Match: getAudioInputStream
Match: AudioFormat
Match: audioStream
Match: AudioSystem
Match: addLineListener
Match: audioStream
Match: playCompleted
Match: playCompleted
Match: InterruptedException
Match: playCompleted
Potential hidden ASCII Encoding detected:
Match: package Audio_Steganography;
Match: import java.io.File;
Match: import java.io.IOException;
Match: import javax.sound.sampled.AudioFormat;
Match: import javax.sound.sampled.AudioInputStream;
Match: import javax.sound.sampled.AudioSystem;
Match: import javax.sound.sampled.Clip;
Match: import javax.sound.sampled.DataLine;
Match: import javax.sound.sampled.LineEvent;
Match: import javax.sound.sampled.LineListener;
Match: import javax.sound.sampled.LineUnavailableException;
Match: import javax.sound.sampled.UnsupportedAudioFileException;
Match:  * A simple utility class that plays back a sound file.
Match:  * @author www.codejava.net
Match: public class AudioPlayer implements LineListener {
Match:  * this flag indicates whether the playback completes or not.
Match: boolean playCompleted;
Match:  * this flag indicates whether the playback is stopped or not.
Match: boolean isStopped;
Match:  * Play a given audio file.
Match:  * @param audioFilePath
Match:  *            Path of the audio file.
Match:  * @throws IOException
Match:  * @throws UnsupportedAudioFileException
Match:  * @throws LineUnavailableException
Match: void play(String audioFilePath) throws UnsupportedAudioFileException,
Match: IOException, LineUnavailableException {
Match: File audioFile = new File(audioFilePath);
Match: AudioInputStream audioStream = AudioSystem
Match: .getAudioInputStream(audioFile);
Match: AudioFormat format = audioStream.getFormat();
Match: DataLine.Info info = new DataLine.Info(Clip.class, format);
Match: Clip audioClip = (Clip) AudioSystem.getLine(info);
Match: audioClip.addLineListener(this);
Match: audioClip.open(audioStream);
Match: audioClip.start();
Match: playCompleted = false;
Match: while (!playCompleted) {
Match: // wait for the playback completes
Match: Thread.sleep(1000);
Match: } catch (InterruptedException ex) {
Match: if (isStopped) {
Match: audioClip.stop();
Match: audioClip.close();
Match:  * Stop playing back.
Match: public void stop() {
Match: isStopped = true;
Match:  * Listens to the audio line events to know when the playback completes.
Match: public void update(LineEvent event) {
Match: LineEvent.Type type = event.getType();
Match: if (type == LineEvent.Type.STOP) {
Match: playCompleted = true;
Potential hidden RC4 Encryption detected:
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: AudioInputStream
Match: getAudioInputStream
Match: InterruptedException
Potential hidden DES Encryption detected:
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: AudioInputStream
Match: getAudioInputStream
Match: InterruptedException
Potential hidden Blowfish Encryption detected:
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: AudioInputStream
Match: getAudioInputStream
Match: InterruptedException
Potential hidden XOR Encryption detected:
Match: Steganography
Match: IOException
Match: AudioFormat
Match: AudioInputStream
Match: AudioSystem
Match: LineListener
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: AudioPlayer
Match: implements
Match: LineListener
Match: playCompleted
Match: audioFilePath
Match: IOException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: audioFilePath
Match: UnsupportedAudioFileException
Match: IOException
Match: LineUnavailableException
Match: audioFilePath
Match: AudioInputStream
Match: audioStream
Match: AudioSystem
Match: getAudioInputStream
Match: AudioFormat
Match: audioStream
Match: AudioSystem
Match: addLineListener
Match: audioStream
Match: playCompleted
Match: playCompleted
Match: InterruptedException
Match: playCompleted
Potential hidden Triple DES Encryption detected:
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Analyzing: ./DigitalSteganography/src/Audio_Steganography/Decode_Audio.java

Classes: {'Decode_Audio'}
Imports: {'java.io.FileNotFoundException', 'javax.crypto.SecretKey', 'javax.crypto.spec.PBEParameterSpec', 'javax.crypto.IllegalBlockSizeException', 'javax.sound.sampled.AudioSystem', 'javax.crypto.Cipher', 'java.security.spec.InvalidKeySpecException', 'java.security.InvalidAlgorithmParameterException', 'javax.crypto.BadPaddingException', 'Coding.SendEmail', 'java.security.NoSuchAlgorithmException', 'java.security.InvalidKeyException', 'javax.crypto.NoSuchPaddingException', 'javax.sound.sampled.AudioInputStream', 'javax.swing.JOptionPane', 'javax.crypto.SecretKeyFactory', 'java.io.IOException', 'javax.sound.sampled.UnsupportedAudioFileException', 'java.io.File', 'javax.crypto.spec.PBEKeySpec', 'javax.swing.JFileChooser', 'java.io.PrintWriter'}
Method References: {'java', 'byte', 'char', 'boolean', 'String'}
Anomalies detected using Z-Score: {' ': 7.695942454269778, 'e': 2.41291678709897}
Anomalies detected using GESD: {' ': 7.695942454269778}
Anomalies detected using Quantile: {' ': 3947, 'o': 887, 'a': 1006, 'n': 756, 'e': 1403, 't': 1148, 'i': 688, 'r': 611, '.': 649, '=': 900}
Fourier Transform Values: [1685503.           44122.02860613   26563.42911851 ...   30020.71622136
   26563.42911851   44122.02860613]
Entropy: 4.388894387513707
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: Properties
Match: Steganography
Match: FileNotFoundException
Match: IOException
Match: PrintWriter
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEKeySpec
Match: PBEParameterSpec
Match: AudioInputStream
Match: AudioSystem
Match: UnsupportedAudioFileException
Match: JFileChooser
Match: JOptionPane
Match: PBEWithMD5AndDES
Match: plainTextBytes
Match: audioBytes
Match: initComponents
Match: setLocationRelativeTo
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: jButtonSelectAudio
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: JTextField
Match: jTextFieldAudioPath
Match: JTextField
Match: jButtonDecode
Match: jButtonSave
Match: jButtonReset
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: setColumns
Match: jTextAreaDecoddedMessage
Match: Monospaced
Match: jTextAreaDecoddedMessage
Match: setLineWrap
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextFieldAudioPath
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: jButtonDecode
Match: jButtonDecode
Match: jButtonDecode
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonDecodeActionPerformed
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jButtonReset
Match: jButtonReset
Match: jButtonReset
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonResetActionPerformed
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jButtonDecode
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jButtonReset
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldAudioPath
Match: addComponent
Match: jTextFieldPassword
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: addComponent
Match: jTextFieldAudioPath
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldPassword
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonDecode
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: addComponent
Match: jButtonReset
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: initComponents
Match: jButtonSelectAudioActionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: showFileDialog
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: ActionEvent
Match: jButtonDecodeActionPerformed
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: JOptionPane
Match: showMessageDialog
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: ActionEvent
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: JOptionPane
Match: showMessageDialog
Match: showFileDialog
Match: jButtonSaveActionPerformed
Match: ================================================================================
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: jTextFieldAudioPath
Match: getSelectedFile
Match: getAbsolutePath
Match: showSaveDialog
Match: JFileChooser
Match: jTextAreaDecoddedMessage
Match: getSelectedFile
Match: getAbsolutePath
Match: PrintWriter
Match: PrintWriter
Match: JOptionPane
Match: showMessageDialog
Match: Succesfully
Match: FileNotFoundException
Match: JOptionPane
Match: showMessageDialog
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: audioBytes
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: toCharArray
Match: Extracting
Match: extracting
Match: audioBytes
Match: audioBytes
Match: plainTextBytes
Match: =========================
Match: ==============================
Match: =========================
Match: =============================
Match: cipherText=
Match: cipherText
Match: Decrypting
Match: cipherText
Match: cipherText
Match: decryption
Match: PBEKeySpec
Match: pbeKeySpec
Match: PBEParameterSpec
Match: pbeParamSpec
Match: SecretKeyFactory
Match: encryption
Match: encryption
Match: pbeParamSpec
Match: PBEParameterSpec
Match: pbeKeySpec
Match: PBEKeySpec
Match: Decrypting
Match: ciphertext
Match: SecretKeyFactory
Match: getInstance
Match: generateSecret
Match: pbeKeySpec
Match: getInstance
Match: Initialize
Match: parameters
Match: pbeParamSpec
Match: cipherText
Match: EncryptedMessage
Match: jTextAreaDecoddedMessage
Match: EncryptedMessage
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: JOptionPane
Match: showMessageDialog
Match: Exception1
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: JOptionPane
Match: showMessageDialog
Match: ================================================================================/
Match: audioFilePath
Match: audioFilePath
Match: AudioInputStream
Match: audioInputStream
Match: audioBytes
Match: audioFilePath
Match: audioInputStream
Match: AudioSystem
Match: getAudioInputStream
Match: bytesPerFrame
Match: audioInputStream
Match: getFrameSize
Match: bytesPerFrame
Match: audioBytes
Match: audioInputStream
Match: audioBytes
Match: UnsupportedAudioFileException
Match: IOException
Match: audioBytes
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: modify//GEN
Match: jButtonDecode
Match: jButtonReset
Match: jButtonSave
Match: jButtonSelectAudio
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaDecoddedMessage
Match: JTextField
Match: jTextFieldAudioPath
Match: JTextField
Match: jTextFieldPassword
Match: declaration//GEN
Potential hidden Hexadecimal Encoding detected:
Match: 154600
Potential hidden ASCII Encoding detected:
Match:  * To change this license header, choose License Headers in Project Properties.
Match:  * To change this template file, choose Tools | Templates
Match:  * and open the template in the editor.
Match: package Audio_Steganography;
Match: import Coding.SendEmail;
Match: import java.io.File;
Match: import java.io.FileNotFoundException;
Match: import java.io.IOException;
Match: import java.io.PrintWriter;
Match: import java.security.InvalidAlgorithmParameterException;
Match: import java.security.InvalidKeyException;
Match: import java.security.NoSuchAlgorithmException;
Match: import java.security.spec.InvalidKeySpecException;
Match: import javax.crypto.BadPaddingException;
Match: import javax.crypto.Cipher;
Match: import javax.crypto.IllegalBlockSizeException;
Match: import javax.crypto.NoSuchPaddingException;
Match: import javax.crypto.SecretKey;
Match: import javax.crypto.SecretKeyFactory;
Match: import javax.crypto.spec.PBEKeySpec;
Match: import javax.crypto.spec.PBEParameterSpec;
Match: import javax.sound.sampled.AudioInputStream;
Match: import javax.sound.sampled.AudioSystem;
Match: import javax.sound.sampled.UnsupportedAudioFileException;
Match: import javax.swing.JFileChooser;
Match: import javax.swing.JOptionPane;
Match:  * @author Hadi
Match: public class Decode_Audio extends javax.swing.JFrame {
Match:     private static final String algorithm = "PBEWithMD5AndDES";
Match:     byte[] plainTextBytes;
Match:     private char password[];
Match:     private byte[] audioBytes;
Match:     public Decode_Audio() {
Match:         initComponents();
Match:         this.setLocationRelativeTo(null);
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         jButtonSelectAudio = new javax.swing.JButton();
Match:         jScrollPane1 = new javax.swing.JScrollPane();
Match:         jTextAreaDecoddedMessage = new javax.swing.JTextArea();
Match:         jTextFieldPassword = new javax.swing.JTextField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jTextFieldAudioPath = new javax.swing.JTextField();
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jLabel2 = new javax.swing.JLabel();
Match:         jButtonDecode = new javax.swing.JButton();
Match:         jButtonSave = new javax.swing.JButton();
Match:         jButtonReset = new javax.swing.JButton();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
Match:         jButtonSelectAudio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButtonSelectAudio.setText("Select Audio");
Match:         jButtonSelectAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonSelectAudio.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonSelectAudioActionPerformed(evt);
Match:             }
Match:         });
Match:         jTextAreaDecoddedMessage.setColumns(20);
Match:         jTextAreaDecoddedMessage.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
Match:         jTextAreaDecoddedMessage.setLineWrap(true);
Match:         jTextAreaDecoddedMessage.setRows(5);
Match:         jTextAreaDecoddedMessage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Decodded Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N
Match:         jScrollPane1.setViewportView(jTextAreaDecoddedMessage);
Match:         jTextFieldPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Password : ");
Match:         jTextFieldAudioPath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jPanel1.setBackground(new java.awt.Color(0, 0, 0));
Match:         jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
Match:         jLabel2.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel2.setText("Decode Audio ");
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
Match:         );
Match:         jButtonDecode.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButtonDecode.setText("Decode");
Match:         jButtonDecode.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonDecodeActionPerformed(evt);
Match:             }
Match:         });
Match:         jButtonSave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButtonSave.setText("Save");
Match:         jButtonSave.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonSaveActionPerformed(evt);
Match:             }
Match:         });
Match:         jButtonReset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
Match:         jButtonReset.setText("Reset");
Match:         jButtonReset.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonResetActionPerformed(evt);
Match:             }
Match:         });
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jScrollPane1)
Match:                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
Match:                         .addComponent(jButtonDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                         .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addGap(149, 149, 149))
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                             .addComponent(jButtonSelectAudio, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
Match:                             .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                             .addComponent(jTextFieldAudioPath)
Match:                             .addComponent(jTextFieldPassword))))
Match:                 .addContainerGap())
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jButtonSelectAudio, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
Match:                     .addComponent(jTextFieldAudioPath))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jTextFieldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
Match:                     .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jButtonDecode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                     .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
Match:                     .addComponent(jButtonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addContainerGap())
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void jButtonSelectAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectAudioActionPerformed
Match:         showFileDialog(true);
Match:     }//GEN-LAST:event_jButtonSelectAudioActionPerformed
Match:     private void jButtonDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecodeActionPerformed
Match:         if(jTextFieldAudioPath.getText().equals("")
Match:                 || jTextFieldPassword.getText().equals("")){
Match:             JOptionPane.showMessageDialog(this, "Please First Choose the Audio and Enter Password!");
Match:         else
Match:         extract();
Match:                 
Match:     }//GEN-LAST:event_jButtonDecodeActionPerformed
Match:     private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
Match:         jTextAreaDecoddedMessage.setText(null);
Match:         jTextFieldPassword.setText(null);
Match:         jTextFieldAudioPath.setText(null);
Match:     }//GEN-LAST:event_jButtonResetActionPerformed
Match:     private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
Match:         if(jTextAreaDecoddedMessage.getText().equals(""))
Match:             JOptionPane.showMessageDialog(this, "No Message to Save");
Match:         else
Match:         showFileDialog(false);        
Match:     }//GEN-LAST:event_jButtonSaveActionPerformed
Match: /**************************** Open File or Save File . ****************************/
Match: /*================================================================================*/
Match:  private java.io.File showFileDialog(final boolean open) {
Match:     JFileChooser fc = new JFileChooser("Open a File");
Match:     javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter() {
Match:        @Override
Match:        public boolean accept(java.io.File f) {
Match:           String name = f.getName().toLowerCase();
Match:           if(open)
Match:              return f.isDirectory() ||
Match:                 name.endsWith(".wav") || name.endsWith(".mp3") || name.endsWith(".au");
Match:           return f.isDirectory()||name.endsWith(".txt");
Match:           }
Match:        @Override
Match:        public String getDescription() {
Match:           if(open)
Match:              return "Audio (*.wav, *.mp3, *.au)";
Match:           return "Text (*.txt)";
Match:           }
Match:     fc.setAcceptAllFileFilterUsed(false);
Match:     fc.addChoosableFileFilter(ff);
Match:     java.io.File f = null;
Match:    if(open && fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
Match:        jTextFieldAudioPath.setText(fc.getSelectedFile().getAbsolutePath());
Match:     else if(!open && fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
Match:         String Message = jTextAreaDecoddedMessage.getText();
Match:         String Path = fc.getSelectedFile().getAbsolutePath();
Match:         try {
Match:              PrintWriter out = new PrintWriter(Path+".txt"); 
Match:                 out.write(Message);
Match:                 out.close();
Match:                 JOptionPane.showMessageDialog(this, "Saved Succesfully");
Match:             
Match:         } catch (FileNotFoundException ex) {
Match:             JOptionPane.showMessageDialog(this, "Error!");
Match:         }     
Match:     return f;
Match:  /**************************** End Of File Dialog Window. *************************/
Match: /*================================================================================*/
Match: /*=================================================================================*/    
Match: /******************* All Decoding Functions Start from Here.
Match:      * @return  ***********************/
Match: /*=================================================================================*/       
Match:     public boolean extract() {
Match:         audioBytes = readAudio(jTextFieldAudioPath.getText());
Match:         password = jTextFieldPassword.getText().toCharArray();
Match: System.out
Match: .println("Extracting the encrypted text from the audio file ...");
Match: System.out
Match: .println("The audio bytes before extracting the encrypted message length: "
Match: + audioBytes.length);
Match: boolean success = true;
Match: byte[] buff = decode_text(audioBytes);
Match: System.out.println("The extracted message length: " + buff.length);
Match: plainTextBytes = decrypt(buff, password);
Match:                  
Match: return success;
Match: /** ========================= Decode_Text Method. ==============================.*/
Match:     private byte[] decode_text(byte[] data) {
Match: int length = 0;
Match: int offset = 32;
Match: // loop through 32 bytes of data to determine text length
Match: for (int i = 0; i < 32; ++i) // i=24 will also work, as only the 4th
Match: // byte contains real data
Match: length = (length << 1) | (data[i] & 1);
Match: System.out.println("The extracted length is: " + length);
Match: byte[] result = new byte[length];
Match: // loop through each byte of text
Match: for (int b = 0; b < result.length; ++b)
Match: // loop through each bit within a byte of text
Match: for (int i = 0; i < 8; ++i, ++offset)
Match: // assign bit: [(new byte value) << 1] OR [(text byte) AND 1]
Match: result[b] = (byte) ((result[b] << 1) | (data[offset] & 1));
Match: return result;
Match: /**========================= DeCrypt Method. ** ============================= */
Match:      * @param cipherText=
Match:      * @param password
Match:      * @return 
Match: public byte[] decrypt(byte[] cipherText, char password[]) {
Match: System.out.println("Decrypting the cipher message: "
Match: + new String(cipherText));
Match: System.out.println("The cipher message size is: " + cipherText.length);
Match: System.out
Match:  .println("The decryption password length: " + password.length);
Match:                 PBEKeySpec pbeKeySpec;
Match: PBEParameterSpec pbeParamSpec;
Match: SecretKeyFactory keyFac;
Match: byte[] plainText = null;
Match: // same salt as in encryption
Match: byte[] salt = { (byte) 0xc7, (byte) 0x73, (byte) 0x21, (byte) 0x8c,
Match: (byte) 0x7e, (byte) 0xc8, (byte) 0xee, (byte) 0x99 };
Match: // Same iteration count in encryption
Match: int count = 20;
Match: // Create PBE parameter set
Match: pbeParamSpec = new PBEParameterSpec(salt, count);
Match: pbeKeySpec = new PBEKeySpec(password);
Match: System.out.println("Decrypting the ciphertext ...");
Match: keyFac = SecretKeyFactory.getInstance(algorithm);
Match: SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);
Match: // Create PBE Cipher
Match: Cipher pbeCipher = Cipher.getInstance(algorithm);
Match: // Initialize PBE Cipher with key and parameters
Match: pbeCipher.init(Cipher.DECRYPT_MODE, pbeKey, pbeParamSpec);
Match:                         
Match: // Decrypt the cipher text
Match: plainText = pbeCipher.doFinal(cipherText);
Match: System.out.println("The decrypted message: "+new String(plainText));   
Match:                                 String EncryptedMessage = new String(plainText);               
Match:                                 
Match:                                 jTextAreaDecoddedMessage.setText(EncryptedMessage);
Match: System.out.println("The decrypted message length: "
Match: + plainText.length);
Match: } catch (IllegalBlockSizeException | BadPaddingException ex) {
Match:                             JOptionPane.showMessageDialog(this, 
Match:                             "MayBe Password is wrong or Audio is not Encrypted"
Match:                                     + " Or MayBe you encrypted large size of Text! ");
Match: System.out.println("Possible password missmatch!!\n");
Match: System.out.println("Caught Exception1: " + ex);
Match:                 } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException ex) {
Match: // Handle the error...
Match: JOptionPane.showMessageDialog(this, 
Match:                 "MayBe Password is wrong or Audio is not Encrypted");
Match: return plainText;
Match: /********************** This method to read the input audio file. ******************/
Match: /** ================================================================================/
Match:      * @param audioFilePath
Match:      * @return 
Match: public static byte[] readAudio(String audioFilePath) {
Match: System.out.println("Reading the audio file......");
Match: AudioInputStream audioInputStream = null;
Match: byte[] audioBytes = null;
Match: File audioFile = new File(audioFilePath);
Match: audioInputStream = AudioSystem.getAudioInputStream(audioFile);
Match: int bytesPerFrame = audioInputStream.getFormat().getFrameSize();
Match: // Set an arbitrary buffer size of 1024 frames.
Match: int numBytes = 154600 * bytesPerFrame;
Match: audioBytes = new byte[numBytes];
Match: audioInputStream.read(audioBytes);
Match: } catch (Exception ex) {
Match: System.out.println("Audio file error:" + ex);
Match: } catch (UnsupportedAudioFileException | IOException e) {
Match: System.out.println("Audio file error:" + e);
Match: return audioBytes;
Match: /*******************************End of Decoding Functions. **************************/
Match: /*==================================================================================*/
Match: /*==================================================================================*/
Match: /*==================================================================================*/
Match: /*==================================================================================*/
Match:      * End of Decoding Functions.
Match:      * @param args
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(Decode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(Decode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(Decode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(Decode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             @Override
Match:             public void run() {
Match:                 new Decode_Audio().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton jButtonDecode;
Match:     private javax.swing.JButton jButtonReset;
Match:     private javax.swing.JButton jButtonSave;
Match:     private javax.swing.JButton jButtonSelectAudio;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel2;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JScrollPane jScrollPane1;
Match:     private javax.swing.JTextArea jTextAreaDecoddedMessage;
Match:     private javax.swing.JTextField jTextFieldAudioPath;
Match:     private javax.swing.JTextField jTextFieldPassword;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: InvalidAlgorithmParameterException
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: ================================================================================
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: InvalidAlgorithmParameterException
Match: ================================================================================/
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: FileNotFoundException
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: setDefaultCloseOperation
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: createTitledBorder
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: setHorizontalAlignment
Match: jTextFieldAudioPath
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: addActionListener
Match: jButtonDecodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: addActionListener
Match: jButtonResetActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jTextFieldAudioPath
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldPassword
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonDecodeActionPerformed
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: showMessageDialog
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldAudioPath
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: FileNotFoundException
Match: showMessageDialog
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: =========================
Match: ==============================
Match: =========================
Match: =============================
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: EncryptedMessage
Match: jTextAreaDecoddedMessage
Match: EncryptedMessage
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: showMessageDialog
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: showMessageDialog
Match: ================================================================================/
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: UnsupportedAudioFileException
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: FileNotFoundException
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: setDefaultCloseOperation
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: createTitledBorder
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: setHorizontalAlignment
Match: jTextFieldAudioPath
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: addActionListener
Match: jButtonDecodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: addActionListener
Match: jButtonResetActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jTextFieldAudioPath
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldPassword
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonDecodeActionPerformed
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: showMessageDialog
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldAudioPath
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: FileNotFoundException
Match: showMessageDialog
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: =========================
Match: ==============================
Match: =========================
Match: =============================
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: EncryptedMessage
Match: jTextAreaDecoddedMessage
Match: EncryptedMessage
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: showMessageDialog
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: showMessageDialog
Match: ================================================================================/
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: UnsupportedAudioFileException
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: FileNotFoundException
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: setLocationRelativeTo
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: setDefaultCloseOperation
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: createTitledBorder
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: setHorizontalAlignment
Match: jTextFieldAudioPath
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: addActionListener
Match: jButtonDecodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: addActionListener
Match: jButtonResetActionPerformed
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jTextFieldAudioPath
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldPassword
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonDecodeActionPerformed
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: showMessageDialog
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldAudioPath
Match: jTextAreaDecoddedMessage
Match: showMessageDialog
Match: FileNotFoundException
Match: showMessageDialog
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: =========================
Match: ==============================
Match: =========================
Match: =============================
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: EncryptedMessage
Match: jTextAreaDecoddedMessage
Match: EncryptedMessage
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: showMessageDialog
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: showMessageDialog
Match: ================================================================================/
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: UnsupportedAudioFileException
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonSelectAudio
Match: jTextAreaDecoddedMessage
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: Properties
Match: Steganography
Match: FileNotFoundException
Match: IOException
Match: PrintWriter
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEKeySpec
Match: PBEParameterSpec
Match: AudioInputStream
Match: AudioSystem
Match: UnsupportedAudioFileException
Match: JFileChooser
Match: JOptionPane
Match: PBEWithMD5AndDES
Match: plainTextBytes
Match: audioBytes
Match: initComponents
Match: setLocationRelativeTo
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: jButtonSelectAudio
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: JTextField
Match: jTextFieldAudioPath
Match: JTextField
Match: jButtonDecode
Match: jButtonSave
Match: jButtonReset
Match: setDefaultCloseOperation
Match: WindowConstants
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: setColumns
Match: jTextAreaDecoddedMessage
Match: Monospaced
Match: jTextAreaDecoddedMessage
Match: setLineWrap
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: setHorizontalAlignment
Match: SwingConstants
Match: jTextFieldAudioPath
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: jButtonDecode
Match: jButtonDecode
Match: jButtonDecode
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonDecodeActionPerformed
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jButtonReset
Match: jButtonReset
Match: jButtonReset
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonResetActionPerformed
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jButtonDecode
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jButtonReset
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldAudioPath
Match: addComponent
Match: jTextFieldPassword
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: addComponent
Match: jTextFieldAudioPath
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldPassword
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonDecode
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: addComponent
Match: jButtonReset
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: initComponents
Match: jButtonSelectAudioActionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: showFileDialog
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: ActionEvent
Match: jButtonDecodeActionPerformed
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: JOptionPane
Match: showMessageDialog
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: ActionEvent
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextFieldPassword
Match: jTextFieldAudioPath
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: JOptionPane
Match: showMessageDialog
Match: showFileDialog
Match: jButtonSaveActionPerformed
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: jTextFieldAudioPath
Match: getSelectedFile
Match: getAbsolutePath
Match: showSaveDialog
Match: JFileChooser
Match: jTextAreaDecoddedMessage
Match: getSelectedFile
Match: getAbsolutePath
Match: PrintWriter
Match: PrintWriter
Match: JOptionPane
Match: showMessageDialog
Match: Succesfully
Match: FileNotFoundException
Match: JOptionPane
Match: showMessageDialog
Match: audioBytes
Match: jTextFieldAudioPath
Match: jTextFieldPassword
Match: toCharArray
Match: Extracting
Match: extracting
Match: audioBytes
Match: audioBytes
Match: plainTextBytes
Match: cipherText
Match: cipherText
Match: Decrypting
Match: cipherText
Match: cipherText
Match: decryption
Match: PBEKeySpec
Match: pbeKeySpec
Match: PBEParameterSpec
Match: pbeParamSpec
Match: SecretKeyFactory
Match: encryption
Match: encryption
Match: pbeParamSpec
Match: PBEParameterSpec
Match: pbeKeySpec
Match: PBEKeySpec
Match: Decrypting
Match: ciphertext
Match: SecretKeyFactory
Match: getInstance
Match: generateSecret
Match: pbeKeySpec
Match: getInstance
Match: Initialize
Match: parameters
Match: pbeParamSpec
Match: cipherText
Match: EncryptedMessage
Match: jTextAreaDecoddedMessage
Match: EncryptedMessage
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: JOptionPane
Match: showMessageDialog
Match: Exception1
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: JOptionPane
Match: showMessageDialog
Match: audioFilePath
Match: audioFilePath
Match: AudioInputStream
Match: audioInputStream
Match: audioBytes
Match: audioFilePath
Match: audioInputStream
Match: AudioSystem
Match: getAudioInputStream
Match: bytesPerFrame
Match: audioInputStream
Match: getFrameSize
Match: bytesPerFrame
Match: audioBytes
Match: audioInputStream
Match: audioBytes
Match: UnsupportedAudioFileException
Match: IOException
Match: audioBytes
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: jButtonDecode
Match: jButtonReset
Match: jButtonSave
Match: jButtonSelectAudio
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaDecoddedMessage
Match: JTextField
Match: jTextFieldAudioPath
Match: JTextField
Match: jTextFieldPassword
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: InvalidAlgorithmParameterException
Match: NoSuchAlgorithmException
Match: IllegalBlockSizeException
Match: UnsupportedAudioFileException
Match: jTextAreaDecoddedMessage
Match: setDefaultCloseOperation
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jTextAreaDecoddedMessage
Match: jButtonDecodeActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonResetActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonDecodeActionPerformed
Match: jButtonResetActionPerformed
Match: jButtonResetActionPerformed
Match: jTextAreaDecoddedMessage
Match: jButtonResetActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jTextAreaDecoddedMessage
Match: jButtonSaveActionPerformed
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: jTextAreaDecoddedMessage
Match: ================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =========================
Match: ==============================
Match: =========================
Match: =============================
Match: jTextAreaDecoddedMessage
Match: IllegalBlockSizeException
Match: NoSuchAlgorithmException
Match: InvalidAlgorithmParameterException
Match: ================================================================================/
Match: UnsupportedAudioFileException
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: ==================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Match: jTextAreaDecoddedMessage
Analyzing: ./DigitalSteganography/src/Audio_Steganography/Encode_Audio.java

Classes: {'Encode_Audio', 'CaptureThread'}
Imports: {'javax.sound.sampled.Mixer', 'javax.swing.JFileChooser', 'javax.crypto.SecretKey', 'javax.crypto.spec.PBEParameterSpec', 'javax.crypto.IllegalBlockSizeException', 'java.io.ByteArrayOutputStream', 'java.io.ByteArrayInputStream', 'javax.crypto.Cipher', 'javax.sound.sampled.AudioSystem', 'java.security.spec.InvalidKeySpecException', 'java.security.InvalidAlgorithmParameterException', 'javax.crypto.BadPaddingException', 'javax.swing.ImageIcon', 'javax.sound.sampled.AudioFileFormat', 'Coding.SendEmail', 'java.awt.Cursor', 'javax.sound.sampled.AudioFormat', 'java.security.NoSuchAlgorithmException', 'java.awt.Font', 'javax.sound.sampled.LineUnavailableException', 'java.security.InvalidKeyException', 'javax.crypto.NoSuchPaddingException', 'javax.sound.sampled.AudioInputStream', 'javax.swing.JOptionPane', 'javax.crypto.SecretKeyFactory', 'javax.sound.sampled.DataLine', 'javax.swing.filechooser.FileFilter', 'java.io.IOException', 'javax.sound.sampled.UnsupportedAudioFileException', 'java.io.File', 'javax.crypto.spec.PBEKeySpec', 'javax.sound.sampled.TargetDataLine'}
Method References: {'java', 'int', 'File', 'AudioFormat', 'byte', 'char', 'boolean', 'String'}
Anomalies detected using Z-Score: {'e': 2.4151876012567324, ' ': 7.60793423706105}
Anomalies detected using GESD: {' ': 7.60793423706105}
Anomalies detected using Quantile: {'a': 1901, 'e': 2475, ' ': 6866, 'i': 1320, 'o': 1604, 't': 2083, 'n': 1477, 'r': 1211, '=': 1416}
Fourier Transform Values: [3069027.           57452.61197284   44290.50120527 ...   20672.35012589
   44290.50120527   57452.61197284]
Entropy: 4.379010639898907
Steganography Likely Detected!
Potential hidden Base64 Encoding detected:
Match: Steganography
Match: ByteArrayInputStream
Match: ByteArrayOutputStream
Match: IOException
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEKeySpec
Match: PBEParameterSpec
Match: AudioFileFormat
Match: AudioFormat
Match: AudioInputStream
Match: AudioSystem
Match: LineUnavailableException
Match: TargetDataLine
Match: UnsupportedAudioFileException
Match: JFileChooser
Match: JOptionPane
Match: filechooser
Match: FileFilter
Match: PBEWithMD5AndDES
Match: audioBytes
Match: stopCapture
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: AudioFormat
Match: audioFormat
Match: TargetDataLine
Match: targetDataLine
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: AudioInputStream
Match: audioInputStream
Match: inputAudioFilePath
Match: AudioPlayer
Match: AudioPlayer
Match: playbackThread
Match: RecordTimer
Match: isRecording
Match: saveFilePath
Match: SaveEncodeAudio
Match: EncodeAudioPath
Match: iconRecord
Match: getResource
Match: /images/Record
Match: getResource
Match: /images/Stop
Match: getResource
Match: /images/Play
Match: initComponents
Match: jLabelEmbedded
Match: setVisible
Match: jButtonPlayEncodedAudio
Match: setVisible
Match: captureBtn
Match: captureBtn
Match: iconRecord
Match: setEnabled
Match: setVisible
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate=
Match: initComponents
Match: initComponents
Match: captureBtn
Match: labelRecordTime
Match: jButtonSelectAudio
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: JTextField
Match: jButtonEncode
Match: jButtonSave
Match: jLabelEmbedded
Match: jButtonOpenDecoder
Match: jTextPassword
Match: JTextField
Match: jButtonPlayEncodedAudio
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setResizable
Match: captureBtn
Match: captureBtn
Match: captureBtn
Match: captureBtn
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: captureBtnActionPerformed
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: playBtnActionPerformed
Match: labelRecordTime
Match: labelRecordTime
Match: setHorizontalAlignment
Match: SwingConstants
Match: labelRecordTime
Match: RecordTime
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaMessage
Match: setColumns
Match: jTextAreaMessage
Match: Monospaced
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: setHorizontalAlignment
Match: SwingConstants
Match: jButtonEncode
Match: jButtonEncode
Match: jButtonEncode
Match: jButtonEncode
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonEncodeActionPerformed
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jLabelEmbedded
Match: jLabelEmbedded
Match: setHorizontalAlignment
Match: SwingConstants
Match: jLabelEmbedded
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonOpenDecoderActionPerformed
Match: jTextPassword
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: getResource
Match: /images/Play
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonPlayEncodedAudioActionPerformed
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Succesfully
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: createSequentialGroup
Match: addComponent
Match: captureBtn
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: labelRecordTime
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonEncode
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonPlayEncodedAudio
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldSelectAudio
Match: addComponent
Match: jTextPassword
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: addComponent
Match: jLabelEmbedded
Match: GroupLayout
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonOpenDecoder
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: captureBtn
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: labelRecordTime
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldSelectAudio
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextPassword
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jButtonPlayEncodedAudio
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jLabelEmbedded
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonOpenDecoder
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncode
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: initComponents
Match: captureBtnActionPerformed
Match: ActionEvent
Match: captureBtnActionPerformed
Match: isRecording
Match: startRecording
Match: stopRecording
Match: captureBtnActionPerformed
Match: playBtnActionPerformed
Match: ActionEvent
Match: playBtnActionPerformed
Match: stopPlaying
Match: playBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jButtonPlayEncodedAudio
Match: showFileDialog
Match: JOptionPane
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: showFileDialog
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: ActionEvent
Match: jButtonOpenDecoderActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: ActionEvent
Match: jButtonEncodeActionPerformed
Match: jTextFieldSelectAudio
Match: jTextPassword
Match: jTextAreaMessage
Match: JOptionPane
Match: showMessageDialog
Match: jButtonPlayEncodedAudio
Match: setVisible
Match: jLabelEmbedded
Match: setVisible
Match: setVisible
Match: JOptionPane
Match: showMessageDialog
Match: jButtonEncodeActionPerformed
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudioActionPerformed
Match: ActionEvent
Match: jButtonPlayEncodedAudioActionPerformed
Match: isPlayingEncodedAudio
Match: playEncodedAudio
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudioActionPerformed
Match: startRecording
Match: captureBtn
Match: captureBtn
Match: setEnabled
Match: isRecording
Match: captureAudio
Match: RecordTimer
Match: labelRecordTime
Match: stopRecording
Match: captureBtn
Match: captureBtn
Match: iconRecord
Match: setEnabled
Match: isRecording
Match: stopCapture
Match: getPredefinedCursor
Match: saveAudioFile
Match: RecordTimer
Match: labelRecordTime
Match: playbackThread
Match: captureBtn
Match: setEnabled
Match: saveFilePath
Match: captureBtn
Match: setEnabled
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: IOException
Match: playbackThread
Match: stopPlaying
Match: playbackThread
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: isPlayingEncodedAudio
Match: playbackThread
Match: ==================================================================================
Match: ==================================================================================
Match: saveAudioFile
Match: JFileChooser
Match: fileChooser
Match: JFileChooser
Match: FileFilter
Match: FileFilter
Match: getDescription
Match: isDirectory
Match: toLowerCase
Match: fileChooser
Match: setFileFilter
Match: fileChooser
Match: setAcceptAllFileFilterUsed
Match: userChoice
Match: fileChooser
Match: showSaveDialog
Match: userChoice
Match: JFileChooser
Match: saveFilePath
Match: fileChooser
Match: getSelectedFile
Match: getAbsolutePath
Match: saveFilePath
Match: toLowerCase
Match: saveFilePath
Match: saveFilePath
Match: JOptionPane
Match: showMessageDialog
Match: saveFilePath
Match: setEnabled
Match: IOException
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: IOException
Match: IOException
Match: byteArrayOutputStream
Match: toByteArray
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioFormat
Match: audioFormat
Match: getAudioFormat
Match: AudioInputStream
Match: audioInputStream
Match: AudioInputStream
Match: audioFormat
Match: audioFormat
Match: getFrameSize
Match: AudioSystem
Match: audioInputStream
Match: AudioFileFormat
Match: audioInputStream
Match: byteArrayOutputStream
Match: ================================================================================
Match: microphone
Match: ByteArrayOutputStream
Match: captureAudio
Match: AudioSystem
Match: getMixerInfo
Match: everything
Match: audioFormat
Match: getAudioFormat
Match: dataLineInfo
Match: TargetDataLine
Match: audioFormat
Match: AudioSystem
Match: TargetDataLine
Match: targetDataLine
Match: TargetDataLine
Match: dataLineInfo
Match: targetDataLine
Match: audioFormat
Match: targetDataLine
Match: microphone
Match: captureThread
Match: CaptureThread
Match: captureThread
Match: AudioFormat
Match: parameters
Match: parameters
Match: declartions
Match: AudioFormat
Match: getAudioFormat
Match: sampleRate
Match: sampleSizeInBits
Match: AudioFormat
Match: sampleRate
Match: sampleSizeInBits
Match: getAudioFormat
Match: //=================================================================================//
Match: microphone
Match: CaptureThread
Match: tempBuffer
Match: byteArrayOutputStream
Match: ByteArrayOutputStream
Match: stopCapture
Match: stopCapture
Match: stopCapture
Match: targetDataLine
Match: tempBuffer
Match: tempBuffer
Match: byteArrayOutputStream
Match: tempBuffer
Match: byteArrayOutputStream
Match: CaptureThread
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: EncodeAudioPath
Match: getSelectedFile
Match: getAbsolutePath
Match: jTextFieldSelectAudio
Match: getSelectedFile
Match: getAbsolutePath
Match: showSaveDialog
Match: JFileChooser
Match: SaveEncodeAudio
Match: getSelectedFile
Match: getAbsolutePath
Match: SaveEncodeAudio
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: audioBytes
Match: AudioInputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: getFrameLength
Match: AudioSystem
Match: isFileTypeSupported
Match: AudioFileFormat
Match: AudioSystem
Match: AudioFileFormat
Match: Steganographed
Match: SaveEncodeAudio
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: jTextPassword
Match: toCharArray
Match: jTextAreaMessage
Match: inputAudioFilePath
Match: jTextFieldSelectAudio
Match: audioBytes
Match: inputAudioFilePath
Match: audioInputStreamForEncode
Match: AudioSystem
Match: getAudioInputStream
Match: inputAudioFilePath
Match: UnsupportedAudioFileException
Match: IOException
Match: audioBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: audioBytes
Match: encrypting
Match: encryptedTextBytes
Match: messageLength
Match: encryptedTextBytes
Match: conversion
Match: messageLength
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: encryptedTextBytes
Match: audioBytes
Match: IllegalArgumentException
Match: conversion
Match: 0x000000FF
Match: audioFilePath
Match: AudioInputStream
Match: audioInputStream
Match: audioBytes
Match: audioFilePath
Match: audioInputStream
Match: AudioSystem
Match: getAudioInputStream
Match: bytesPerFrame
Match: audioInputStream
Match: getFrameSize
Match: bytesPerFrame
Match: audioBytes
Match: audioInputStream
Match: audioBytes
Match: JOptionPane
Match: showMessageDialog
Match: UnsupportedAudioFileException
Match: IOException
Match: JOptionPane
Match: showMessageDialog
Match: audioBytes
Match: Encrypting
Match: encryption
Match: PBEKeySpec
Match: pbeKeySpec
Match: PBEParameterSpec
Match: pbeParamSpec
Match: SecretKeyFactory
Match: cipherbuff
Match: pbeParamSpec
Match: PBEParameterSpec
Match: pbeKeySpec
Match: PBEKeySpec
Match: SecretKeyFactory
Match: getInstance
Match: generateSecret
Match: pbeKeySpec
Match: getInstance
Match: Initialize
Match: parameters
Match: pbeParamSpec
Match: cipherbuff
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: encryption
Match: cipherbuff
Match: cipherbuff
Match: cipherbuff
Match: playEncodedAudio
Match: RecordTimer
Match: jLabelEmbedded
Match: isPlayingEncodedAudio
Match: playbackThread
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: EncodeAudioPath
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: IOException
Match: playbackThread
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: defaultstate=
Match: introduced
Match: //download
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: modify//GEN
Match: captureBtn
Match: jButtonEncode
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: jButtonSave
Match: jButtonSelectAudio
Match: jLabelEmbedded
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaMessage
Match: JTextField
Match: jTextFieldSelectAudio
Match: JTextField
Match: jTextPassword
Match: labelRecordTime
Match: declaration//GEN
Potential hidden Hexadecimal Encoding detected:
Match: 154600
Potential hidden ASCII Encoding detected:
Match: package Audio_Steganography;
Match: import Coding.SendEmail;
Match: import java.awt.Cursor;
Match: import java.awt.Font;
Match: import java.io.ByteArrayInputStream;
Match: import java.io.ByteArrayOutputStream;
Match: import java.io.File;
Match: import java.io.IOException;
Match: import java.security.InvalidAlgorithmParameterException;
Match: import java.security.InvalidKeyException;
Match: import java.security.NoSuchAlgorithmException;
Match: import java.security.spec.InvalidKeySpecException;
Match: import javax.crypto.BadPaddingException;
Match: import javax.crypto.Cipher;
Match: import javax.crypto.IllegalBlockSizeException;
Match: import javax.crypto.NoSuchPaddingException;
Match: import javax.crypto.SecretKey;
Match: import javax.crypto.SecretKeyFactory;
Match: import javax.crypto.spec.PBEKeySpec;
Match: import javax.crypto.spec.PBEParameterSpec;
Match: import javax.sound.sampled.AudioFileFormat;
Match: import javax.sound.sampled.AudioFormat;
Match: import javax.sound.sampled.AudioInputStream;
Match: import javax.sound.sampled.AudioSystem;
Match: import javax.sound.sampled.DataLine;
Match: import javax.sound.sampled.LineUnavailableException;
Match: import javax.sound.sampled.Mixer;
Match: import javax.sound.sampled.TargetDataLine;
Match: import javax.sound.sampled.UnsupportedAudioFileException;
Match: import javax.swing.ImageIcon;
Match: import javax.swing.JFileChooser;
Match: import javax.swing.JOptionPane;
Match: import javax.swing.filechooser.FileFilter;
Match:  * @author Hadi
Match: public class Encode_Audio extends javax.swing.JFrame {
Match:     private static final String algorithm = "PBEWithMD5AndDES";
Match:     byte[] audioBytes;
Match:     byte[] Message;
Match:     char pwd[];
Match:   boolean stopCapture = false;
Match:   ByteArrayOutputStream byteArrayOutputStream;
Match:   AudioFormat audioFormat;
Match:   TargetDataLine targetDataLine;
Match:   AudioInputStream audioInputStreamForEncode;
Match:   AudioInputStream audioInputStream;
Match:     String inputAudioFilePath;
Match: private final AudioPlayer player = new AudioPlayer();
Match: private Thread playbackThread;
Match: private RecordTimer timer;
Match: private boolean isRecording = false;
Match: private boolean isPlaying = false;
Match: private String saveFilePath;
Match:         private String SaveEncodeAudio;
Match:         String EncodeAudioPath;
Match:         // Icons used for buttons
Match: private final ImageIcon iconRecord = new ImageIcon(getClass().getResource(
Match: "/images/Record.gif"));
Match: private final ImageIcon iconStop = new ImageIcon(getClass().getResource(
Match: "/images/Stop.gif"));
Match: private final ImageIcon iconPlay = new ImageIcon(getClass().getResource(
Match: "/images/Play.gif"));
Match:     public Encode_Audio() {
Match:         initComponents();
Match:         jLabelEmbedded.setVisible(false);
Match:         jButtonPlayEncodedAudio.setVisible(false);
Match:                 captureBtn.setFont(new Font("Sans", Font.BOLD, 14));
Match: captureBtn.setIcon(iconRecord);
Match: playBtn.setFont(new Font("Sans", Font.BOLD, 14));
Match: playBtn.setIcon(iconPlay);
Match: playBtn.setEnabled(false); 
Match:                 jLabel2.setVisible(false);
Match:      * This method is called from within the constructor to initialize the form.
Match:      * WARNING: Do NOT modify this code. The content of this method is always
Match:      * regenerated by the Form Editor.
Match:     @SuppressWarnings("unchecked")
Match:     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
Match:     private void initComponents() {
Match:         captureBtn = new javax.swing.JButton();
Match:         playBtn = new javax.swing.JButton();
Match:         labelRecordTime = new javax.swing.JLabel();
Match:         jButtonSelectAudio = new javax.swing.JButton();
Match:         jScrollPane1 = new javax.swing.JScrollPane();
Match:         jTextAreaMessage = new javax.swing.JTextArea();
Match:         jTextFieldSelectAudio = new javax.swing.JTextField();
Match:         jLabel1 = new javax.swing.JLabel();
Match:         jButtonEncode = new javax.swing.JButton();
Match:         jButtonSave = new javax.swing.JButton();
Match:         jLabelEmbedded = new javax.swing.JLabel();
Match:         jPanel1 = new javax.swing.JPanel();
Match:         jLabel3 = new javax.swing.JLabel();
Match:         jButtonOpenDecoder = new javax.swing.JButton();
Match:         jTextPassword = new javax.swing.JTextField();
Match:         jButtonPlayEncodedAudio = new javax.swing.JButton();
Match:         jLabel2 = new javax.swing.JLabel();
Match:         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
Match:         setResizable(false);
Match:         captureBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
Match:         captureBtn.setText("Record Audio");
Match:         captureBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         captureBtn.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 captureBtnActionPerformed(evt);
Match:             }
Match:         });
Match:         playBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
Match:         playBtn.setText("Play");
Match:         playBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         playBtn.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 playBtnActionPerformed(evt);
Match:             }
Match:         });
Match:         labelRecordTime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
Match:         labelRecordTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         labelRecordTime.setText("RecordTime : 00:00:00");
Match:         jButtonSelectAudio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
Match:         jButtonSelectAudio.setText("Select Audio");
Match:         jButtonSelectAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonSelectAudio.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonSelectAudioActionPerformed(evt);
Match:             }
Match:         });
Match:         jTextAreaMessage.setColumns(20);
Match:         jTextAreaMessage.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
Match:         jTextAreaMessage.setRows(5);
Match:         jTextAreaMessage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Message :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
Match:         jScrollPane1.setViewportView(jTextAreaMessage);
Match:         jTextFieldSelectAudio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
Match:         jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel1.setText("Password : ");
Match:         jButtonEncode.setFont(new java.awt.Font("Aharoni", 1, 24)); // NOI18N
Match:         jButtonEncode.setText("Encode");
Match:         jButtonEncode.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonEncode.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonEncodeActionPerformed(evt);
Match:             }
Match:         });
Match:         jButtonSave.setFont(new java.awt.Font("Aharoni", 1, 24)); // NOI18N
Match:         jButtonSave.setText("Save");
Match:         jButtonSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonSave.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonSaveActionPerformed(evt);
Match:             }
Match:         });
Match:         jLabelEmbedded.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
Match:         jLabelEmbedded.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabelEmbedded.setText("hh:mm:ss");
Match:         jPanel1.setBackground(new java.awt.Color(0, 0, 0));
Match:         jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
Match:         jLabel3.setForeground(new java.awt.Color(255, 255, 255));
Match:         jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel3.setText("Encode Audio");
Match:         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
Match:         jPanel1.setLayout(jPanel1Layout);
Match:         jPanel1Layout.setHorizontalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:         );
Match:         jPanel1Layout.setVerticalGroup(
Match:             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
Match:         );
Match:         jButtonOpenDecoder.setFont(new java.awt.Font("Aharoni", 1, 24)); // NOI18N
Match:         jButtonOpenDecoder.setText("Open Decoder");
Match:         jButtonOpenDecoder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonOpenDecoder.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonOpenDecoderActionPerformed(evt);
Match:             }
Match:         });
Match:         jTextPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
Match:         jButtonPlayEncodedAudio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
Match:         jButtonPlayEncodedAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Play.gif"))); // NOI18N
Match:         jButtonPlayEncodedAudio.setText("Play");
Match:         jButtonPlayEncodedAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
Match:         jButtonPlayEncodedAudio.addActionListener(new java.awt.event.ActionListener() {
Match:             public void actionPerformed(java.awt.event.ActionEvent evt) {
Match:                 jButtonPlayEncodedAudioActionPerformed(evt);
Match:             }
Match:         });
Match:         jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
Match:         jLabel2.setForeground(new java.awt.Color(0, 153, 0));
Match:         jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
Match:         jLabel2.setText("Encoded Succesfully !");
Match:         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
Match:         getContentPane().setLayout(layout);
Match:         layout.setHorizontalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addComponent(jScrollPane1)
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(captureBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(labelRecordTime, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
Match:                             .addComponent(jButtonEncode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButtonSelectAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                             .addComponent(jButtonPlayEncodedAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                             .addComponent(jTextFieldSelectAudio)
Match:                             .addComponent(jTextPassword)
Match:                             .addGroup(layout.createSequentialGroup()
Match:                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                                     .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
Match:                                     .addComponent(jLabelEmbedded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                                 .addGap(18, 18, 18)
Match:                                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                                     .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                                     .addComponent(jButtonOpenDecoder, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))))))
Match:                 .addContainerGap())
Match:         );
Match:         layout.setVerticalGroup(
Match:             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:             .addGroup(layout.createSequentialGroup()
Match:                 .addContainerGap()
Match:                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                     .addComponent(playBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(captureBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                     .addComponent(labelRecordTime, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jTextFieldSelectAudio)
Match:                     .addComponent(jButtonSelectAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addComponent(jTextPassword)
Match:                     .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
Match:                     .addGroup(layout.createSequentialGroup()
Match:                         .addComponent(jButtonPlayEncodedAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addGap(0, 1, Short.MAX_VALUE))
Match:                     .addComponent(jLabelEmbedded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
Match:                     .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
Match:                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
Match:                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
Match:                         .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
Match:                         .addComponent(jButtonOpenDecoder, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
Match:                     .addComponent(jButtonEncode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
Match:                 .addContainerGap())
Match:         );
Match:         pack();
Match:     }// </editor-fold>//GEN-END:initComponents
Match:     private void captureBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureBtnActionPerformed
Match: if (isRecording == false) 
Match: startRecording();
Match:         else 
Match: stopRecording();
Match:                
Match:     }//GEN-LAST:event_captureBtnActionPerformed
Match:     private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
Match: if (!isPlaying) 
Match: playBack();
Match:         else 
Match: stopPlaying();           
Match:     }//GEN-LAST:event_playBtnActionPerformed
Match:     private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
Match:                if(jButtonPlayEncodedAudio.isShowing())
Match:        showFileDialog(false);
Match:         else
Match:             JOptionPane.showMessageDialog(this, "Error! Audio is Not Decoded ");
Match:     }//GEN-LAST:event_jButtonSaveActionPerformed
Match:     private void jButtonSelectAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectAudioActionPerformed
Match:                showFileDialog(true);
Match:     }//GEN-LAST:event_jButtonSelectAudioActionPerformed
Match:     private void jButtonOpenDecoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenDecoderActionPerformed
Match:         Decode_Audio audio = new Decode_Audio();
Match:         audio.setVisible(true);
Match:         audio.setLocationRelativeTo(null);
Match:         this.dispose();
Match:     }//GEN-LAST:event_jButtonOpenDecoderActionPerformed
Match:     private void jButtonEncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncodeActionPerformed
Match:         if(jTextFieldSelectAudio.getText().equals("")
Match:                 || jTextPassword.getText().equals("")
Match:                 || jTextAreaMessage.getText().equals(""))
Match:             JOptionPane.showMessageDialog(this, "Please Fill all the Field !");
Match:         else{
Match:             embed(); 
Match:             if(embed()){
Match:             jButtonPlayEncodedAudio.setVisible(true);
Match:             jLabelEmbedded.setVisible(true);
Match:             jLabel2.setVisible(true);
Match:             }
Match:             else
Match:                 JOptionPane.showMessageDialog(this, "Embed Error");
Match:     }//GEN-LAST:event_jButtonEncodeActionPerformed
Match:     boolean isPlayingEncodedAudio = false;  
Match:     private void jButtonPlayEncodedAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayEncodedAudioActionPerformed
Match:         if (isPlayingEncodedAudio == false)
Match: playEncodedAudio();
Match: stopPlayingEncoded();
Match:     }//GEN-LAST:event_jButtonPlayEncodedAudioActionPerformed
Match:  /************* Start recording sound, the time will count up. *************/
Match: private void startRecording() {
Match:                     captureBtn.setText("Stop");
Match:                     captureBtn.setIcon(iconStop);
Match:                     playBtn.setEnabled(false);
Match:                     isRecording = true;
Match:                     captureAudio();
Match: timer = new RecordTimer(labelRecordTime);
Match: timer.start();
Match: /************** Stop recording and save the sound into a WAV file. ***************/
Match: private void stopRecording() {
Match:         timer.cancel();
Match:         captureBtn.setText("Record");
Match:         captureBtn.setIcon(iconRecord);
Match:         playBtn.setEnabled(true);
Match:         isRecording = false;
Match:         stopCapture = true;
Match:         setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
Match:         saveAudioFile();
Match: /****************** Start playing back the sound. *****************************/
Match: private void playBack() {
Match: timer = new RecordTimer(labelRecordTime);
Match: timer.start();
Match: isPlaying = true;
Match: playbackThread = new Thread(new Runnable() {
Match: public void run() {
Match: playBtn.setText("Stop");
Match: playBtn.setIcon(iconStop);
Match: captureBtn.setEnabled(false);
Match: player.play(saveFilePath);
Match: timer.reset();
Match: playBtn.setText("Play");
Match: captureBtn.setEnabled(true);
Match: playBtn.setIcon(iconPlay);
Match:                         isPlaying = false;
Match: } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
Match: playbackThread.start();
Match: /****************** Stop playing back. ********************************** */
Match: private void stopPlaying() {         
Match: timer.reset();
Match: timer.interrupt();
Match: player.stop();
Match: playbackThread.interrupt();               
Match:         private void stopPlayingEncoded() {         
Match: timer.reset();
Match: timer.interrupt();
Match:                 jButtonPlayEncodedAudio.setText("Play");
Match:                 jButtonPlayEncodedAudio.setIcon(iconPlay);
Match:                 isPlayingEncodedAudio = false;
Match: player.stop();
Match: playbackThread.interrupt();  
Match:                 
Match:                 
Match: /*==================================================================================*/        
Match: /*==================================================================================*/
Match: /******************Start Save the recorded sound into a WAV file. *******************/
Match:     private void saveAudioFile() {
Match: JFileChooser fileChooser = new JFileChooser();
Match: FileFilter wavFilter = new FileFilter() {
Match: public String getDescription() {
Match: return "Sound file (*.WAV)";
Match: public boolean accept(File file) {
Match: if (file.isDirectory()) {
Match: return true;
Match: return file.getName().toLowerCase().endsWith(".wav");
Match: fileChooser.setFileFilter(wavFilter);
Match: fileChooser.setAcceptAllFileFilterUsed(false);
Match: int userChoice = fileChooser.showSaveDialog(this);
Match: if (userChoice == JFileChooser.APPROVE_OPTION) {
Match: saveFilePath = fileChooser.getSelectedFile().getAbsolutePath();
Match: if (!saveFilePath.toLowerCase().endsWith(".wav")) {
Match: saveFilePath += ".wav";
Match: File wavFile = new File(saveFilePath);
Match: save(wavFile);
Match: JOptionPane.showMessageDialog(null,
Match: "Saved recorded sound to:\n" + saveFilePath);
Match: playBtn.setEnabled(true);
Match: } catch (IOException ex) {
Match: JOptionPane.showMessageDialog(null, "Error",
Match: "Error saving to sound file!",
Match: JOptionPane.ERROR_MESSAGE);
Match:      * save Method for saving Audio After Recording
Match:      * @param wavFile
Match:      * @throws java.io.IOException
Match:     public void save(File wavFile) throws IOException {
Match: byte[] audioData = byteArrayOutputStream.toByteArray();
Match: ByteArrayInputStream bais = new ByteArrayInputStream(audioData);
Match:                 AudioFormat audioFormat = getAudioFormat();
Match: AudioInputStream audioInputStream = new AudioInputStream(bais, audioFormat,
Match: audioData.length / audioFormat.getFrameSize());
Match: AudioSystem.write(audioInputStream, AudioFileFormat.Type.WAVE, wavFile);
Match: audioInputStream.close();
Match: byteArrayOutputStream.close();
Match: /*************** End of save Method for saving Audio After Recording. *************/     
Match: /**********************************************************************************/
Match: /*================================================================================*/
Match: /****************************** Start of Capture Audio. ***************************/    
Match:   //This method captures audio input
Match:   //from a microphone and saves it in a
Match:   // ByteArrayOutputStream object.
Match:   private void captureAudio(){
Match:       //Get and display a list of
Match:       // available mixers.
Match:       Mixer.Info[] mixerInfo =  AudioSystem.getMixerInfo();
Match:       System.out.println("Available mixers:");
Match:       for(int cnt = 0; cnt < mixerInfo.length; cnt++){
Match: System.out.println(mixerInfo[cnt].getName());
Match:       }//end for loop
Match:       //Get everything set up for capture
Match:       audioFormat = getAudioFormat();
Match:       DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
Match:       //Select one of the available
Match:       // mixers.
Match:       Mixer mixer = AudioSystem.getMixer(mixerInfo[3]);  
Match:       //Get a TargetDataLine on the selected
Match:       // mixer.
Match:       targetDataLine = (TargetDataLine)
Match:               mixer.getLine(dataLineInfo);
Match:       //Prepare the line for use.
Match:       targetDataLine.open(audioFormat);
Match:       targetDataLine.start();
Match:       //Create a thread to capture the microphone
Match:       // data and start it running.  It will run
Match:       // until the Stop button is clicked.
Match:       Thread captureThread = new CaptureThread();
Match:       captureThread.start();
Match:     } catch (Exception e) {
Match:       System.out.println(e);
Match:     }//end catch
Match:   //This method creates and returns an
Match:   // AudioFormat object for a given set of format
Match:   // parameters.  If these parameters don't work
Match:   // well for you, try some of the other
Match:   // allowable parameter values, which are shown
Match:   // in comments following the declartions.
Match:   private AudioFormat getAudioFormat(){
Match:     float sampleRate = 8000.0F;
Match:     //8000,11025,16000,22050,44100
Match:     int sampleSizeInBits = 16;
Match:     //8,16
Match:     int channels = 1;
Match:     boolean signed = true;
Match:     //true,false
Match:     boolean bigEndian = false;
Match:     //true,false
Match:     return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
Match:   }//end getAudioFormat
Match: //=================================================================================//
Match: //Inner class to capture data from microphone
Match: class CaptureThread extends Thread{
Match:   //An arbitrary-size temporary holding buffer
Match:   byte tempBuffer[] = new byte[10000];
Match:   public void run(){
Match:     byteArrayOutputStream =  new ByteArrayOutputStream();
Match:     stopCapture = false;
Match:     try{//Loop until stopCapture is set by
Match:         // another thread that services the Stop
Match:         // button.
Match:       while(!stopCapture){
Match:         //Read data from the internal buffer of
Match:         // the data line.
Match:         int cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
Match:         if(cnt > 0){
Match:           //Save data in output stream object.
Match:           byteArrayOutputStream.write(tempBuffer, 0, cnt);
Match:         }//end if
Match:       }//end while
Match:       byteArrayOutputStream.close();
Match:     }catch (Exception e) {
Match:       System.out.println(e);
Match:       System.exit(0);
Match:     }//end catch
Match:   }//end run
Match: }//end inner class CaptureThread
Match: /****************************End of Capture Audio Methods. ************************/
Match: //================================================================================//
Match: //================================================================================//
Match: /*================================================================================*/
Match: /************** Open File for select Audio or Save Encoded Audio . ****************/
Match: /*================================================================================*/    
Match:  private java.io.File showFileDialog(final boolean open) {
Match:     JFileChooser fc = new JFileChooser("Open a File");
Match:     javax.swing.filechooser.FileFilter ff = new javax.swing.filechooser.FileFilter(){
Match:        @Override
Match:        public boolean accept(File f) {
Match:           String name = f.getName().toLowerCase();
Match:           if(open)
Match:              return f.isDirectory() ||
Match:                 name.endsWith(".wav");
Match:           return f.isDirectory()|| name.endsWith(".wav");
Match:           }
Match:        @Override
Match:        public String getDescription() {
Match:           if(open)
Match:              return "Audio (*.wav)";
Match:           return "Audio (*.wav)";
Match:           }
Match:     fc.setAcceptAllFileFilterUsed(false);
Match:     fc.addChoosableFileFilter(ff);
Match:     java.io.File f = null;
Match:    if(open && fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
Match:        EncodeAudioPath = fc.getSelectedFile().getAbsolutePath();
Match:       jTextFieldSelectAudio.setText(fc.getSelectedFile().getAbsolutePath());
Match:     else if(!open && fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
Match:                 SaveEncodeAudio = fc.getSelectedFile().getAbsolutePath();
Match: /************** now write the byte array to an audio file. ************************/ 
Match:                 File fileOut = new File(SaveEncodeAudio);
Match: ByteArrayInputStream byteIS = new ByteArrayInputStream(audioBytes);
Match: AudioInputStream audioIS = new AudioInputStream(byteIS,
Match: audioInputStreamForEncode.getFormat(), audioInputStreamForEncode.getFrameLength());
Match: if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE, audioIS)){
Match: AudioSystem.write(audioIS, AudioFileFormat.Type.WAVE, fileOut);
Match: System.out.println("Steganographed AU file is written as "
Match: + SaveEncodeAudio + "...");
Match:                                 System.out.println();
Match: } catch (Exception e) {
Match: System.err.println("Sound File write error");
Match:     return f;
Match:  /**************************** End Of File Dialog Window. *************************/
Match: /*================================================================================*/
Match: /*================================================================================*/
Match: /**************************** Start Of Encoding Functions. *************************/
Match: /*================================================================================*/
Match:      * End Of File Dialog Window.
Match:      * @return
Match:     public boolean embed() {
Match:               
Match:                 pwd = jTextPassword.getText().toCharArray();                
Match:                 Message = jTextAreaMessage.getText().getBytes();
Match:                 inputAudioFilePath = jTextFieldSelectAudio.getText();
Match:                 audioBytes = readAudio(inputAudioFilePath);
Match:                 
Match:                 try {
Match: audioInputStreamForEncode =
Match:                         AudioSystem.getAudioInputStream(new File(inputAudioFilePath));
Match: } catch (UnsupportedAudioFileException | IOException e) {
Match:                  
Match:                  if(audioBytes == null)
Match:                      return false;
Match:                  else{
Match:                        
Match: System.out.println("Embedding the text message in the audio file ...");
Match: System.out.println("The plain text data length: "+ Message.length);
Match:                                 
Match: // Encrypt the text data.
Match: byte[] encryptedTextBytes = null;
Match: try {                    
Match: encryptedTextBytes = encrypt(Message, pwd);
Match: if (encryptedTextBytes.length * 8 > audioBytes.length)
Match: return false;
Match: } catch (Exception e) {
Match: System.out.println("Error while encrypting the plain text data: "
Match: System.out.println("The encrypted message length: "
Match: + encryptedTextBytes.length);
Match: // First encode the length of the encrypted text
Match: int messageLength = encryptedTextBytes.length;
Match: byte[] len = bit_conversion(messageLength);
Match: System.out
Match: .println("The audio bytes before embedding the message length: "
Match: + audioBytes.length);
Match: audioBytes = encode_text(audioBytes, len, 0);
Match: System.out.println("The audio bytes after embedding the message length: "
Match: + audioBytes.length);
Match: audioBytes = encode_text(audioBytes, encryptedTextBytes, 32);
Match: System.out.println("The audio bytes after embedding the text message: "
Match: + audioBytes.length);
Match: System.out.println();
Match:                             
Match: return true;
Match:  private byte[] encode_text(byte[] data, byte[] addition, int offset)
Match: // check that the data + offset will fit in the image
Match: if (addition.length + offset > data.length) {
Match: throw new IllegalArgumentException("File not long enough!");
Match: // loop through each addition byte
Match: for (int i = 0; i < addition.length; ++i) {
Match: // loop through the 8 bits of each byte
Match: int add = addition[i];
Match: for (int bit = 7; bit >= 0; --bit, ++offset) // ensure the new
Match: // through both
Match: // assign an integer to b, shifted by bit spaces AND 1
Match: // a single bit of the current byte
Match: int b = (add >>> bit) & 1;
Match: // assign the bit by taking: [(previous byte value) AND 0xfe] OR
Match: // bit to add
Match: // changes the last bit of the byte in the image to be the bit
Match: // of addition
Match: data[offset] = (byte) ((data[offset] & 0xFE) | b);
Match: return data;
Match:  private byte[] bit_conversion(int i) {
Match: return (new byte[] { 0, 0, 0, (byte) (i & 0x000000FF) });
Match:  public static byte[] readAudio(String audioFilePath) {
Match: System.out.println("Reading the audio file......");
Match:  AudioInputStream audioInputStream = null;
Match: byte[] audioBytes = null;
Match: File audioFile = new File(audioFilePath);
Match: audioInputStream = AudioSystem.getAudioInputStream(audioFile);
Match: int bytesPerFrame = audioInputStream.getFormat().getFrameSize();
Match: // Set an arbitrary buffer size of 1024 frames.
Match: int numBytes = 154600 * bytesPerFrame;
Match: audioBytes = new byte[numBytes];
Match: audioInputStream.read(audioBytes);
Match: } catch (Exception ex) {
Match: System.out.println("Audio file error:" + ex);
Match:                             JOptionPane.showMessageDialog(null, "Audio Error Please Check Your Audio File!");
Match:                             return null;
Match: } catch (UnsupportedAudioFileException | IOException e) {
Match: System.out.println("Audio file error:" + e);
Match:                     JOptionPane.showMessageDialog(null, "Audio Error Check The Audio File");
Match:                     return null;
Match: return audioBytes;
Match:  public byte[] encrypt(byte[] plainText, char password[]) {
Match: System.out.println("Encrypting the plaintext message: "
Match: + new String(plainText));
Match: System.out.println("The plain message size is: " + plainText.length);
Match: System.out.println("The encryption password length: " + password.length);
Match: PBEKeySpec pbeKeySpec;
Match: PBEParameterSpec pbeParamSpec;
Match: SecretKeyFactory keyFac;
Match: byte[] cipherbuff = null;
Match: byte[] salt = { (byte) 0xc7, (byte) 0x73, (byte) 0x21, (byte) 0x8c,
Match: (byte) 0x7e, (byte) 0xc8, (byte) 0xee, (byte) 0x99 };
Match: // Iteration count
Match: int count = 20;
Match: // Create PBE parameter set
Match: pbeParamSpec = new PBEParameterSpec(salt, count);
Match: pbeKeySpec = new PBEKeySpec(password);
Match: keyFac = SecretKeyFactory.getInstance(algorithm);
Match: SecretKey pbeKey = keyFac.generateSecret(pbeKeySpec);
Match: // Create PBE Cipher
Match: Cipher pbeCipher = Cipher.getInstance(algorithm);
Match: // Initialize PBE Cipher with key and parameters
Match: pbeCipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeParamSpec);
Match: cipherbuff = pbeCipher.doFinal(plainText);
Match: } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException ex) {
Match: // Handle the error...
Match: System.out.println("Caught Exception while encryption: " + ex);
Match: System.out.println("The encrypted message: " + new String(cipherbuff));
Match: System.out
Match: .println("The encrypted message length: " + cipherbuff.length);
Match: return cipherbuff;
Match:  private void playEncodedAudio() {
Match: timer = new RecordTimer(jLabelEmbedded);
Match: timer.start();
Match:                 
Match: isPlayingEncodedAudio = true;
Match: playbackThread = new Thread(new Runnable() {
Match: public void run() {
Match: jButtonPlayEncodedAudio.setText("Stop");
Match: jButtonPlayEncodedAudio.setIcon(iconStop);
Match:                            
Match: player.play(EncodeAudioPath);                       
Match: timer.reset();
Match:                         isPlaying = false;
Match:                         
Match:                         } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
Match:             }
Match:         });
Match: playbackThread.start();
Match: /*************************** End Of Encoding Functions. ****************************/ 
Match: /*=================================================================================*/ 
Match: /*=================================================================================*/ 
Match: /*=================================================================================*/ 
Match: /*=================================================================================*/ 
Match: /*=================================================================================*/
Match:      * End Of Encoding Functions.
Match:      * @param args
Match:     public static void main(String args[]) {
Match:         /* Set the Nimbus look and feel */
Match:         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
Match:         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
Match:          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
Match:          */
Match:         try {
Match:             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
Match:                 if ("Nimbus".equals(info.getName())) {
Match:                     javax.swing.UIManager.setLookAndFeel(info.getClassName());
Match:                     break;
Match:                 }
Match:             }
Match:         } catch (ClassNotFoundException ex) {
Match:             java.util.logging.Logger.getLogger(Encode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (InstantiationException ex) {
Match:             java.util.logging.Logger.getLogger(Encode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (IllegalAccessException ex) {
Match:             java.util.logging.Logger.getLogger(Encode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
Match:             java.util.logging.Logger.getLogger(Encode_Audio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
Match:         //</editor-fold>
Match:         //</editor-fold>
Match:         /* Create and display the form */
Match:         java.awt.EventQueue.invokeLater(new Runnable() {
Match:             @Override
Match:             public void run() {
Match:                 new Encode_Audio().setVisible(true);
Match:             }
Match:         });
Match:     // Variables declaration - do not modify//GEN-BEGIN:variables
Match:     private javax.swing.JButton captureBtn;
Match:     private javax.swing.JButton jButtonEncode;
Match:     private javax.swing.JButton jButtonOpenDecoder;
Match:     private javax.swing.JButton jButtonPlayEncodedAudio;
Match:     private javax.swing.JButton jButtonSave;
Match:     private javax.swing.JButton jButtonSelectAudio;
Match:     private javax.swing.JLabel jLabel1;
Match:     private javax.swing.JLabel jLabel2;
Match:     private javax.swing.JLabel jLabel3;
Match:     private javax.swing.JLabel jLabelEmbedded;
Match:     private javax.swing.JPanel jPanel1;
Match:     private javax.swing.JScrollPane jScrollPane1;
Match:     private javax.swing.JTextArea jTextAreaMessage;
Match:     private javax.swing.JTextField jTextFieldSelectAudio;
Match:     private javax.swing.JTextField jTextPassword;
Match:     private javax.swing.JLabel labelRecordTime;
Match:     private javax.swing.JButton playBtn;
Match:     // End of variables declaration//GEN-END:variables
Potential hidden AES Encryption detected:
Match: InvalidAlgorithmParameterException
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: ==================================================================================
Match: ==================================================================================
Match: ================================================================================
Match: //=================================================================================//
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: InvalidAlgorithmParameterException
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Potential hidden RC4 Encryption detected:
Match: ByteArrayInputStream
Match: ByteArrayOutputStream
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: AudioInputStream
Match: audioInputStream
Match: inputAudioFilePath
Match: jButtonPlayEncodedAudio
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: captureBtnActionPerformed
Match: addActionListener
Match: playBtnActionPerformed
Match: setHorizontalAlignment
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: createTitledBorder
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: setHorizontalAlignment
Match: addActionListener
Match: jButtonEncodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: addActionListener
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: addActionListener
Match: jButtonPlayEncodedAudioActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: createSequentialGroup
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: setLocationRelativeTo
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonEncodeActionPerformed
Match: jTextFieldSelectAudio
Match: jTextAreaMessage
Match: showMessageDialog
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonEncodeActionPerformed
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: isPlayingEncodedAudio
Match: playEncodedAudio
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudioActionPerformed
Match: getPredefinedCursor
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: isPlayingEncodedAudio
Match: ==================================================================================
Match: ==================================================================================
Match: setAcceptAllFileFilterUsed
Match: showMessageDialog
Match: showMessageDialog
Match: byteArrayOutputStream
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: audioInputStream
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: byteArrayOutputStream
Match: ================================================================================
Match: ByteArrayOutputStream
Match: sampleSizeInBits
Match: sampleSizeInBits
Match: //=================================================================================//
Match: byteArrayOutputStream
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: byteArrayOutputStream
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldSelectAudio
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: isFileTypeSupported
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: jTextAreaMessage
Match: inputAudioFilePath
Match: jTextFieldSelectAudio
Match: inputAudioFilePath
Match: audioInputStreamForEncode
Match: getAudioInputStream
Match: inputAudioFilePath
Match: UnsupportedAudioFileException
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: IllegalArgumentException
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: showMessageDialog
Match: UnsupportedAudioFileException
Match: showMessageDialog
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: playEncodedAudio
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: declaration//GEN
Potential hidden DES Encryption detected:
Match: ByteArrayInputStream
Match: ByteArrayOutputStream
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: AudioInputStream
Match: audioInputStream
Match: inputAudioFilePath
Match: jButtonPlayEncodedAudio
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: captureBtnActionPerformed
Match: addActionListener
Match: playBtnActionPerformed
Match: setHorizontalAlignment
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: createTitledBorder
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: setHorizontalAlignment
Match: addActionListener
Match: jButtonEncodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: addActionListener
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: addActionListener
Match: jButtonPlayEncodedAudioActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: createSequentialGroup
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: setLocationRelativeTo
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonEncodeActionPerformed
Match: jTextFieldSelectAudio
Match: jTextAreaMessage
Match: showMessageDialog
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonEncodeActionPerformed
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: isPlayingEncodedAudio
Match: playEncodedAudio
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudioActionPerformed
Match: getPredefinedCursor
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: isPlayingEncodedAudio
Match: ==================================================================================
Match: ==================================================================================
Match: setAcceptAllFileFilterUsed
Match: showMessageDialog
Match: showMessageDialog
Match: byteArrayOutputStream
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: audioInputStream
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: byteArrayOutputStream
Match: ================================================================================
Match: ByteArrayOutputStream
Match: sampleSizeInBits
Match: sampleSizeInBits
Match: //=================================================================================//
Match: byteArrayOutputStream
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: byteArrayOutputStream
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldSelectAudio
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: isFileTypeSupported
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: jTextAreaMessage
Match: inputAudioFilePath
Match: jTextFieldSelectAudio
Match: inputAudioFilePath
Match: audioInputStreamForEncode
Match: getAudioInputStream
Match: inputAudioFilePath
Match: UnsupportedAudioFileException
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: IllegalArgumentException
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: showMessageDialog
Match: UnsupportedAudioFileException
Match: showMessageDialog
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: playEncodedAudio
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: declaration//GEN
Potential hidden Blowfish Encryption detected:
Match: ByteArrayInputStream
Match: ByteArrayOutputStream
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: AudioInputStream
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: PBEWithMD5AndDES
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: AudioInputStream
Match: audioInputStream
Match: inputAudioFilePath
Match: jButtonPlayEncodedAudio
Match: SuppressWarnings
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: setDefaultCloseOperation
Match: addActionListener
Match: captureBtnActionPerformed
Match: addActionListener
Match: playBtnActionPerformed
Match: setHorizontalAlignment
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: createTitledBorder
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: setHorizontalAlignment
Match: addActionListener
Match: jButtonEncodeActionPerformed
Match: addActionListener
Match: jButtonSaveActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: setVerticalGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: addActionListener
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: addActionListener
Match: jButtonPlayEncodedAudioActionPerformed
Match: setHorizontalAlignment
Match: setHorizontalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createSequentialGroup
Match: createParallelGroup
Match: jButtonSelectAudio
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: createSequentialGroup
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: setVerticalGroup
Match: createParallelGroup
Match: createSequentialGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: ComponentPlacement
Match: createParallelGroup
Match: jTextFieldSelectAudio
Match: jButtonSelectAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: ComponentPlacement
Match: createParallelGroup
Match: createSequentialGroup
Match: jButtonPlayEncodedAudio
Match: ComponentPlacement
Match: createParallelGroup
Match: createParallelGroup
Match: jButtonOpenDecoder
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: playBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: setLocationRelativeTo
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonEncodeActionPerformed
Match: jTextFieldSelectAudio
Match: jTextAreaMessage
Match: showMessageDialog
Match: jButtonPlayEncodedAudio
Match: showMessageDialog
Match: jButtonEncodeActionPerformed
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: isPlayingEncodedAudio
Match: playEncodedAudio
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudioActionPerformed
Match: getPredefinedCursor
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: isPlayingEncodedAudio
Match: ==================================================================================
Match: ==================================================================================
Match: setAcceptAllFileFilterUsed
Match: showMessageDialog
Match: showMessageDialog
Match: byteArrayOutputStream
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: audioInputStream
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: byteArrayOutputStream
Match: ================================================================================
Match: ByteArrayOutputStream
Match: sampleSizeInBits
Match: sampleSizeInBits
Match: //=================================================================================//
Match: byteArrayOutputStream
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: byteArrayOutputStream
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: jTextFieldSelectAudio
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioInputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: isFileTypeSupported
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: jTextAreaMessage
Match: inputAudioFilePath
Match: jTextFieldSelectAudio
Match: inputAudioFilePath
Match: audioInputStreamForEncode
Match: getAudioInputStream
Match: inputAudioFilePath
Match: UnsupportedAudioFileException
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: IllegalArgumentException
Match: AudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: getAudioInputStream
Match: audioInputStream
Match: audioInputStream
Match: showMessageDialog
Match: UnsupportedAudioFileException
Match: showMessageDialog
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: PBEParameterSpec
Match: SecretKeyFactory
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: playEncodedAudio
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: jButtonSelectAudio
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: declaration//GEN
Potential hidden XOR Encryption detected:
Match: Steganography
Match: ByteArrayInputStream
Match: ByteArrayOutputStream
Match: IOException
Match: InvalidAlgorithmParameterException
Match: InvalidKeyException
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: BadPaddingException
Match: IllegalBlockSizeException
Match: NoSuchPaddingException
Match: SecretKeyFactory
Match: PBEKeySpec
Match: PBEParameterSpec
Match: AudioFileFormat
Match: AudioFormat
Match: AudioInputStream
Match: AudioSystem
Match: LineUnavailableException
Match: TargetDataLine
Match: UnsupportedAudioFileException
Match: JFileChooser
Match: JOptionPane
Match: filechooser
Match: FileFilter
Match: PBEWithMD5AndDES
Match: audioBytes
Match: stopCapture
Match: ByteArrayOutputStream
Match: byteArrayOutputStream
Match: AudioFormat
Match: audioFormat
Match: TargetDataLine
Match: targetDataLine
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: AudioInputStream
Match: audioInputStream
Match: inputAudioFilePath
Match: AudioPlayer
Match: AudioPlayer
Match: playbackThread
Match: RecordTimer
Match: isRecording
Match: saveFilePath
Match: SaveEncodeAudio
Match: EncodeAudioPath
Match: iconRecord
Match: getResource
Match: getResource
Match: getResource
Match: initComponents
Match: jLabelEmbedded
Match: setVisible
Match: jButtonPlayEncodedAudio
Match: setVisible
Match: captureBtn
Match: captureBtn
Match: iconRecord
Match: setEnabled
Match: setVisible
Match: constructor
Match: initialize
Match: regenerated
Match: SuppressWarnings
Match: defaultstate
Match: initComponents
Match: initComponents
Match: captureBtn
Match: labelRecordTime
Match: jButtonSelectAudio
Match: jScrollPane1
Match: JScrollPane
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: JTextField
Match: jButtonEncode
Match: jButtonSave
Match: jLabelEmbedded
Match: jButtonOpenDecoder
Match: jTextPassword
Match: JTextField
Match: jButtonPlayEncodedAudio
Match: setDefaultCloseOperation
Match: WindowConstants
Match: setResizable
Match: captureBtn
Match: captureBtn
Match: captureBtn
Match: captureBtn
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: captureBtnActionPerformed
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: playBtnActionPerformed
Match: labelRecordTime
Match: labelRecordTime
Match: setHorizontalAlignment
Match: SwingConstants
Match: labelRecordTime
Match: RecordTime
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: jButtonSelectAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: jTextAreaMessage
Match: setColumns
Match: jTextAreaMessage
Match: Monospaced
Match: jTextAreaMessage
Match: jTextAreaMessage
Match: BorderFactory
Match: createTitledBorder
Match: TitledBorder
Match: JUSTIFICATION
Match: TitledBorder
Match: jScrollPane1
Match: setViewportView
Match: jTextAreaMessage
Match: jTextFieldSelectAudio
Match: setHorizontalAlignment
Match: SwingConstants
Match: jButtonEncode
Match: jButtonEncode
Match: jButtonEncode
Match: jButtonEncode
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonEncodeActionPerformed
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: jButtonSave
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jLabelEmbedded
Match: jLabelEmbedded
Match: setHorizontalAlignment
Match: SwingConstants
Match: jLabelEmbedded
Match: setBackground
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: GroupLayout
Match: jPanel1Layout
Match: GroupLayout
Match: jPanel1Layout
Match: jPanel1Layout
Match: setHorizontalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: jPanel1Layout
Match: setVerticalGroup
Match: jPanel1Layout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: jButtonOpenDecoder
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonOpenDecoderActionPerformed
Match: jTextPassword
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: getResource
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: addActionListener
Match: ActionListener
Match: actionPerformed
Match: ActionEvent
Match: jButtonPlayEncodedAudioActionPerformed
Match: setForeground
Match: setHorizontalAlignment
Match: SwingConstants
Match: Succesfully
Match: GroupLayout
Match: GroupLayout
Match: getContentPane
Match: getContentPane
Match: setHorizontalGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jScrollPane1
Match: createSequentialGroup
Match: addComponent
Match: captureBtn
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: labelRecordTime
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonEncode
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonPlayEncodedAudio
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldSelectAudio
Match: addComponent
Match: jTextPassword
Match: createSequentialGroup
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: addComponent
Match: jLabelEmbedded
Match: GroupLayout
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonOpenDecoder
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: setVerticalGroup
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addContainerGap
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: captureBtn
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: labelRecordTime
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: addComponent
Match: jScrollPane1
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextFieldSelectAudio
Match: addComponent
Match: jButtonSelectAudio
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jTextPassword
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: createSequentialGroup
Match: addComponent
Match: jButtonPlayEncodedAudio
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jLabelEmbedded
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: GroupLayout
Match: GroupLayout
Match: addPreferredGap
Match: LayoutStyle
Match: ComponentPlacement
Match: createParallelGroup
Match: GroupLayout
Match: createParallelGroup
Match: GroupLayout
Match: addComponent
Match: jButtonSave
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonOpenDecoder
Match: GroupLayout
Match: GroupLayout
Match: addComponent
Match: jButtonEncode
Match: GroupLayout
Match: GroupLayout
Match: addContainerGap
Match: initComponents
Match: captureBtnActionPerformed
Match: ActionEvent
Match: captureBtnActionPerformed
Match: isRecording
Match: startRecording
Match: stopRecording
Match: captureBtnActionPerformed
Match: playBtnActionPerformed
Match: ActionEvent
Match: playBtnActionPerformed
Match: stopPlaying
Match: playBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: ActionEvent
Match: jButtonSaveActionPerformed
Match: jButtonPlayEncodedAudio
Match: showFileDialog
Match: JOptionPane
Match: showMessageDialog
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: ActionEvent
Match: jButtonSelectAudioActionPerformed
Match: showFileDialog
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: ActionEvent
Match: jButtonOpenDecoderActionPerformed
Match: setVisible
Match: setLocationRelativeTo
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: ActionEvent
Match: jButtonEncodeActionPerformed
Match: jTextFieldSelectAudio
Match: jTextPassword
Match: jTextAreaMessage
Match: JOptionPane
Match: showMessageDialog
Match: jButtonPlayEncodedAudio
Match: setVisible
Match: jLabelEmbedded
Match: setVisible
Match: setVisible
Match: JOptionPane
Match: showMessageDialog
Match: jButtonEncodeActionPerformed
Match: isPlayingEncodedAudio
Match: jButtonPlayEncodedAudioActionPerformed
Match: ActionEvent
Match: jButtonPlayEncodedAudioActionPerformed
Match: isPlayingEncodedAudio
Match: playEncodedAudio
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudioActionPerformed
Match: startRecording
Match: captureBtn
Match: captureBtn
Match: setEnabled
Match: isRecording
Match: captureAudio
Match: RecordTimer
Match: labelRecordTime
Match: stopRecording
Match: captureBtn
Match: captureBtn
Match: iconRecord
Match: setEnabled
Match: isRecording
Match: stopCapture
Match: getPredefinedCursor
Match: saveAudioFile
Match: RecordTimer
Match: labelRecordTime
Match: playbackThread
Match: captureBtn
Match: setEnabled
Match: saveFilePath
Match: captureBtn
Match: setEnabled
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: IOException
Match: playbackThread
Match: stopPlaying
Match: playbackThread
Match: stopPlayingEncoded
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: isPlayingEncodedAudio
Match: playbackThread
Match: saveAudioFile
Match: JFileChooser
Match: fileChooser
Match: JFileChooser
Match: FileFilter
Match: FileFilter
Match: getDescription
Match: isDirectory
Match: toLowerCase
Match: fileChooser
Match: setFileFilter
Match: fileChooser
Match: setAcceptAllFileFilterUsed
Match: userChoice
Match: fileChooser
Match: showSaveDialog
Match: userChoice
Match: JFileChooser
Match: saveFilePath
Match: fileChooser
Match: getSelectedFile
Match: getAbsolutePath
Match: saveFilePath
Match: toLowerCase
Match: saveFilePath
Match: saveFilePath
Match: JOptionPane
Match: showMessageDialog
Match: saveFilePath
Match: setEnabled
Match: IOException
Match: JOptionPane
Match: showMessageDialog
Match: JOptionPane
Match: IOException
Match: IOException
Match: byteArrayOutputStream
Match: toByteArray
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: AudioFormat
Match: audioFormat
Match: getAudioFormat
Match: AudioInputStream
Match: audioInputStream
Match: AudioInputStream
Match: audioFormat
Match: audioFormat
Match: getFrameSize
Match: AudioSystem
Match: audioInputStream
Match: AudioFileFormat
Match: audioInputStream
Match: byteArrayOutputStream
Match: microphone
Match: ByteArrayOutputStream
Match: captureAudio
Match: AudioSystem
Match: getMixerInfo
Match: everything
Match: audioFormat
Match: getAudioFormat
Match: dataLineInfo
Match: TargetDataLine
Match: audioFormat
Match: AudioSystem
Match: TargetDataLine
Match: targetDataLine
Match: TargetDataLine
Match: dataLineInfo
Match: targetDataLine
Match: audioFormat
Match: targetDataLine
Match: microphone
Match: captureThread
Match: CaptureThread
Match: captureThread
Match: AudioFormat
Match: parameters
Match: parameters
Match: declartions
Match: AudioFormat
Match: getAudioFormat
Match: sampleRate
Match: sampleSizeInBits
Match: AudioFormat
Match: sampleRate
Match: sampleSizeInBits
Match: getAudioFormat
Match: microphone
Match: CaptureThread
Match: tempBuffer
Match: byteArrayOutputStream
Match: ByteArrayOutputStream
Match: stopCapture
Match: stopCapture
Match: stopCapture
Match: targetDataLine
Match: tempBuffer
Match: tempBuffer
Match: byteArrayOutputStream
Match: tempBuffer
Match: byteArrayOutputStream
Match: CaptureThread
Match: showFileDialog
Match: JFileChooser
Match: JFileChooser
Match: filechooser
Match: FileFilter
Match: filechooser
Match: FileFilter
Match: toLowerCase
Match: isDirectory
Match: isDirectory
Match: getDescription
Match: setAcceptAllFileFilterUsed
Match: addChoosableFileFilter
Match: showOpenDialog
Match: JFileChooser
Match: EncodeAudioPath
Match: getSelectedFile
Match: getAbsolutePath
Match: jTextFieldSelectAudio
Match: getSelectedFile
Match: getAbsolutePath
Match: showSaveDialog
Match: JFileChooser
Match: SaveEncodeAudio
Match: getSelectedFile
Match: getAbsolutePath
Match: SaveEncodeAudio
Match: ByteArrayInputStream
Match: ByteArrayInputStream
Match: audioBytes
Match: AudioInputStream
Match: AudioInputStream
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: getFrameLength
Match: AudioSystem
Match: isFileTypeSupported
Match: AudioFileFormat
Match: AudioSystem
Match: AudioFileFormat
Match: Steganographed
Match: SaveEncodeAudio
Match: jTextPassword
Match: toCharArray
Match: jTextAreaMessage
Match: inputAudioFilePath
Match: jTextFieldSelectAudio
Match: audioBytes
Match: inputAudioFilePath
Match: audioInputStreamForEncode
Match: AudioSystem
Match: getAudioInputStream
Match: inputAudioFilePath
Match: UnsupportedAudioFileException
Match: IOException
Match: audioBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: encryptedTextBytes
Match: audioBytes
Match: encrypting
Match: encryptedTextBytes
Match: messageLength
Match: encryptedTextBytes
Match: conversion
Match: messageLength
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: audioBytes
Match: encryptedTextBytes
Match: audioBytes
Match: IllegalArgumentException
Match: conversion
Match: 0x000000FF
Match: audioFilePath
Match: AudioInputStream
Match: audioInputStream
Match: audioBytes
Match: audioFilePath
Match: audioInputStream
Match: AudioSystem
Match: getAudioInputStream
Match: bytesPerFrame
Match: audioInputStream
Match: getFrameSize
Match: bytesPerFrame
Match: audioBytes
Match: audioInputStream
Match: audioBytes
Match: JOptionPane
Match: showMessageDialog
Match: UnsupportedAudioFileException
Match: IOException
Match: JOptionPane
Match: showMessageDialog
Match: audioBytes
Match: Encrypting
Match: encryption
Match: PBEKeySpec
Match: pbeKeySpec
Match: PBEParameterSpec
Match: pbeParamSpec
Match: SecretKeyFactory
Match: cipherbuff
Match: pbeParamSpec
Match: PBEParameterSpec
Match: pbeKeySpec
Match: PBEKeySpec
Match: SecretKeyFactory
Match: getInstance
Match: generateSecret
Match: pbeKeySpec
Match: getInstance
Match: Initialize
Match: parameters
Match: pbeParamSpec
Match: cipherbuff
Match: NoSuchAlgorithmException
Match: InvalidKeySpecException
Match: NoSuchPaddingException
Match: InvalidKeyException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: BadPaddingException
Match: encryption
Match: cipherbuff
Match: cipherbuff
Match: cipherbuff
Match: playEncodedAudio
Match: RecordTimer
Match: jLabelEmbedded
Match: isPlayingEncodedAudio
Match: playbackThread
Match: jButtonPlayEncodedAudio
Match: jButtonPlayEncodedAudio
Match: EncodeAudioPath
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: IOException
Match: playbackThread
Match: defaultstate
Match: introduced
Match: lookandfeel
Match: LookAndFeelInfo
Match: getInstalledLookAndFeels
Match: setLookAndFeel
Match: getClassName
Match: ClassNotFoundException
Match: InstantiationException
Match: IllegalAccessException
Match: UnsupportedLookAndFeelException
Match: EventQueue
Match: invokeLater
Match: setVisible
Match: declaration
Match: captureBtn
Match: jButtonEncode
Match: jButtonOpenDecoder
Match: jButtonPlayEncodedAudio
Match: jButtonSave
Match: jButtonSelectAudio
Match: jLabelEmbedded
Match: JScrollPane
Match: jScrollPane1
Match: jTextAreaMessage
Match: JTextField
Match: jTextFieldSelectAudio
Match: JTextField
Match: jTextPassword
Match: labelRecordTime
Match: declaration
Potential hidden Triple DES Encryption detected:
Match: InvalidAlgorithmParameterException
Match: NoSuchAlgorithmException
Match: IllegalBlockSizeException
Match: LineUnavailableException
Match: UnsupportedAudioFileException
Match: audioInputStreamForEncode
Match: setDefaultCloseOperation
Match: captureBtnActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: captureBtnActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSaveActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonSelectAudioActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonOpenDecoderActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonEncodeActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: jButtonPlayEncodedAudioActionPerformed
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: ==================================================================================
Match: ==================================================================================
Match: setAcceptAllFileFilterUsed
Match: ================================================================================
Match: //=================================================================================//
Match: //================================================================================//
Match: //================================================================================//
Match: ================================================================================
Match: ================================================================================
Match: setAcceptAllFileFilterUsed
Match: audioInputStreamForEncode
Match: audioInputStreamForEncode
Match: ================================================================================
Match: ================================================================================
Match: ================================================================================
Match: audioInputStreamForEncode
Match: UnsupportedAudioFileException
Match: IllegalArgumentException
Match: UnsupportedAudioFileException
Match: NoSuchAlgorithmException
Match: InvalidAlgorithmParameterException
Match: IllegalBlockSizeException
Match: UnsupportedAudioFileException
Match: LineUnavailableException
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: =================================================================================
Match: com/javase/tutorial/uiswing/lookandfeel/plaf
Match: getInstalledLookAndFeels
Match: UnsupportedLookAndFeelException
Analyzing: ./DigitalSteganography/src/Audio_Steganography/RecordTimer.java

Classes: {'RecordTimer'}
Imports: {'java.text.SimpleDateFormat', 'javax.swing.JLabel', 'java.util.Date', 'java.util.TimeZone', 'java.text.DateFormat'}
Method References: {'String'}
Anomalies detected using Z-Score: {'e': 2.7288191887623, ' ': 5.431856796762747}
Anomalies detected using GESD: {' ': 5.431856796762747}
Anomalies detected using Quantile: {'a': 72, 'e': 138, ' ': 248, 'i': 86, 't': 98, 'r': 80, '\n': 70, '\t': 97}
Fourier Transform Values: [129021.          11913.68529967   3103.56983347 ...   2226.63270861
   3103.56983347  11913.68529967]
Entropy: 3.923038697595316
No Steganography Detected.
Potential hidden Base64 Encoding detected:
Match: Steganography
Match: DateFormat
Match: SimpleDateFormat
Match: RecordTimer
Match: DateFormat
Match: dateFormater
Match: SimpleDateFormat
Match: labelRecordTime
Match: RecordTimer
Match: labelRecordTime
Match: labelRecordTime
Match: labelRecordTime
Match: currentTimeMillis
Match: labelRecordTime
Match: toTimeString
Match: InterruptedException
Match: labelRecordTime
Match: record/play
Match: toTimeString
Match: currentTimeMillis
Match: dateFormater
Match: setTimeZone
Match: getTimeZone
Match: timeCounter
Match: dateFormater
Match: timeCounter
Potential hidden ASCII Encoding detected:
Match: package Audio_Steganography;
Match: import java.text.DateFormat;
Match: import java.text.SimpleDateFormat;
Match: import java.util.Date;
Match: import java.util.TimeZone;
Match: import javax.swing.JLabel;
Match:  * This class counts record time/play time in the form of HH:MM:SS
Match:  * @author Hadi Khedri
Match: public class RecordTimer extends Thread {
Match: private DateFormat dateFormater = new SimpleDateFormat("HH:mm:ss");
Match: private boolean isRunning = false;
Match: private boolean isReset = false;
Match: private long startTime;
Match: private JLabel labelRecordTime;
Match: RecordTimer(JLabel labelRecordTime) {
Match: this.labelRecordTime = labelRecordTime;
Match:         @Override
Match: public void run() {
Match: isRunning = true;
Match: startTime = System.currentTimeMillis();
Match: while (isRunning) {
Match:                                 Thread.sleep(1000);
Match:                                 labelRecordTime.setText("Timer: " + toTimeString());
Match:                                         
Match: } catch (InterruptedException ex) {
Match: if (isReset) {
Match: labelRecordTime.setText("Time: 00:00:00");
Match: isRunning = false;
Match:  * Cancel counting record/play time.
Match: void cancel() {
Match: isRunning = false;
Match:  * Reset counting to "00:00:00"
Match: void reset() {
Match: isReset = true;
Match: isRunning = false;
Match:  * Generate a String for time counter in the format of "HH:mm:ss"
Match:  * @return the time counter
Match: private String toTimeString() {
Match: long now = System.currentTimeMillis();
Match: Date current = new Date(now - startTime);
Match: dateFormater.setTimeZone(TimeZone.getTimeZone("GMT"));
Match: String timeCounter = dateFormater.format(current);
Match: return timeCounter;
Potential hidden RC4 Encryption detected:
Match: SimpleDateFormat
Match: SimpleDateFormat
Match: currentTimeMillis
Match: InterruptedException
Match: currentTimeMillis
Potential hidden DES Encryption detected:
Match: SimpleDateFormat
Match: SimpleDateFormat
Match: currentTimeMillis
Match: InterruptedException
Match: currentTimeMillis
Potential hidden Blowfish Encryption detected:
Match: SimpleDateFormat
Match: SimpleDateFormat
Match: currentTimeMillis
Match: InterruptedException
Match: currentTimeMillis
Potential hidden XOR Encryption detected:
Match: Steganography
Match: DateFormat
Match: SimpleDateFormat
Match: RecordTimer
Match: DateFormat
Match: dateFormater
Match: SimpleDateFormat
Match: labelRecordTime
Match: RecordTimer
Match: labelRecordTime
Match: labelRecordTime
Match: labelRecordTime
Match: currentTimeMillis
Match: labelRecordTime
Match: toTimeString
Match: InterruptedException
Match: labelRecordTime
Match: toTimeString
Match: currentTimeMillis
Match: dateFormater
Match: setTimeZone
Match: getTimeZone
Match: timeCounter
Match: dateFormater
Match: timeCounter
Found Java files:
Analyzing: ./DigitalSteganography/src/TextSteganography/Text_Decryption.java

Classes: {'Text_Decryption'}
Imports: {'javax.swing.JOptionPane'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {' ': 7.70489817920574}
Anomalies detected using GESD: {' ': 7.70489817920574}
Anomalies detected using Quantile: {' ': 2315, 'o': 492, 'a': 697, 'n': 474, 'e': 644, 't': 558, '.': 462}
Fourier Transform Values: [914450.          10101.85250144   9767.01242418 ...   9016.10947876
   9767.01242418  10101.85250144]
Entropy: 4.392734134153395
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/TextSteganography/Text_Encryption.java

Classes: {'Text_Encryption'}
Imports: {'javax.swing.JOptionPane'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {'a': 2.012041283405019, ' ': 7.811616251351344}
Anomalies detected using GESD: {' ': 7.811616251351344}
Anomalies detected using Quantile: {'a': 683, 'e': 600, ' ': 2270, 't': 542, 'n': 467, 'o': 477, '.': 456}
Fourier Transform Values: [890416.           9391.4096307    8865.92299309 ...   6891.66889148
   8865.92299309   9391.4096307 ]
Entropy: 4.392454776980233
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/ImageSteganography/Encryption.java

Classes: {'Encryption'}
Imports: {'java.awt', 'Coding.SendEmail', 'java.awt.image', 'javax.swing', 'javax.imageio', 'java.awt.event'}
Method References: {'int', 'boolean', 'ActionEvent', 'BufferedImage', 'byte', 'java', 'String'}
Anomalies detected using Z-Score: {'e': 2.891723720149252, ' ': 7.4890127713067685}
Anomalies detected using GESD: {' ': 7.4890127713067685}
Anomalies detected using Quantile: {'a': 351, 'e': 734, ' ': 1735, 't': 464, 'n': 354, 'o': 327, 'r': 295, '\n': 267, 's': 294, 'i': 365}
Fourier Transform Values: [696267.          14081.64547993   9740.74789248 ...   9629.28631816
   9740.74789248  14081.64547993]
Entropy: 4.221439143820001
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/ImageSteganography/Decryption.java

Classes: {'Decryption'}
Imports: {'java.awt', 'java.awt.image', 'javax.swing', 'javax.imageio', 'java.awt.event'}
Method References: {'int', 'boolean', 'ActionEvent', 'BufferedImage', 'byte', 'java'}
Anomalies detected using Z-Score: {'e': 2.549031817867687, ' ': 7.311997102921235}
Anomalies detected using GESD: {' ': 7.311997102921235}
Anomalies detected using Quantile: {'a': 233, 'e': 422, ' ': 1084, 't': 336, 'n': 226, 'o': 213, 'r': 178, 'i': 233}
Fourier Transform Values: [425649.           8808.15594626   2748.25166381 ...   7495.22983362
   2748.25166381   8808.15594626]
Entropy: 4.157581141669627
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Coding/HomePage.java

Classes: {'HomePage'}
Imports: {'TextSteganography.Text_Encryption', 'TextSteganography.Text_Decryption', 'ImageSteganography.Decryption', 'Audio_Steganography.Encode_Audio', 'Audio_Steganography.Decode_Audio', 'java.awt.Color', 'ImageSteganography.Encryption'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {' ': 7.570690692230603}
Anomalies detected using GESD: {' ': 7.570690692230603}
Anomalies detected using Quantile: {'a': 983, 'e': 981, ' ': 3442, 'o': 881, 'n': 784, 't': 972, '.': 703}
Fourier Transform Values: [1408917.           21682.65270816   13957.72279789 ...   11628.24616413
   13957.72279789   21682.65270816]
Entropy: 4.388941480935372
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Coding/SendEmail.java

Classes: {'SendEmail'}
Imports: {'java.io.File', 'java.util.Properties', 'javax.swing.JOptionPane', 'javax.mail.Message', 'javax.mail.Multipart', 'javax.mail.internet.MimeMultipart', 'javax.mail.internet.MimeBodyPart', 'javax.mail.Session', 'javax.mail.internet.MimeMessage', 'javax.mail.MessagingException', 'javax.mail.internet.InternetAddress', 'javax.mail.PasswordAuthentication', 'java.io.IOException', 'javax.mail.Transport', 'java.awt.Color', 'javax.swing.JFileChooser'}
Method References: {'java', 'String', 'boolean'}
Anomalies detected using Z-Score: {' ': 7.9780012474637205}
Anomalies detected using GESD: {' ': 7.9780012474637205}
Anomalies detected using Quantile: {'a': 1072, 'e': 1074, ' ': 3893, 'o': 726, 'n': 645, 't': 917, '.': 725}
Fourier Transform Values: [1441091.            8225.4977186     9919.19567573 ...   30855.90342999
    9919.19567573    8225.4977186 ]
Entropy: 4.327155650283713
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Coding/SplashScreenFrame.java

Classes: {'SplashThread', 'SplashScreenFrame'}
Imports: set()
Method References: set()
Anomalies detected using Z-Score: {' ': 7.853469042537675}
Anomalies detected using GESD: {' ': 7.853469042537675}
Anomalies detected using Quantile: {'a': 333, 'e': 251, ' ': 1160, 'o': 206, 'n': 194, 'r': 173, 't': 189, '.': 184}
Fourier Transform Values: [392838.           8916.7070499    6440.321238   ...  14081.08785884
   6440.321238     8916.7070499 ]
Entropy: 4.268340044805349
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Coding/Main.java

Classes: {'Main'}
Imports: set()
Method References: {'String'}
Anomalies detected using Z-Score: {' ': 6.923051872837642}
Anomalies detected using GESD: {' ': 6.923051872837642}
Anomalies detected using Quantile: {'a': 97, 'e': 119, ' ': 436, 'o': 72, 'l': 81}
Fourier Transform Values: [138363.           3439.33038024   6967.71537153 ...   3203.63432199
   6967.71537153   3439.33038024]
Entropy: 3.958025675710089
No Steganography Detected.
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Coding/LoginForm.java

Classes: {'LoginForm'}
Imports: {'javax.swing.BorderFactory', 'javax.swing.JOptionPane', 'javax.swing.border.Border', 'java.awt.event.KeyEvent', 'java.awt.Color'}
Method References: {'java', 'String'}
Anomalies detected using Z-Score: {'e': 2.220930410944882, ' ': 7.81712956661228}
Anomalies detected using GESD: {' ': 7.81712956661228}
Anomalies detected using Quantile: {'a': 881, 'e': 1133, ' ': 3489, 'o': 748, 'n': 633, 'r': 488, 't': 883, '.': 591, 's': 474}
Fourier Transform Values: [1332520.           30299.23097568    1819.34750633 ...    7256.27876514
    1819.34750633   30299.23097568]
Entropy: 4.342606962933164
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Audio_Steganography/AudioPlayer.java

Classes: {'AudioPlayer'}
Imports: {'java.io.File', 'javax.sound.sampled.LineUnavailableException', 'javax.sound.sampled.Clip', 'javax.sound.sampled.AudioSystem', 'javax.sound.sampled.AudioFormat', 'javax.sound.sampled.UnsupportedAudioFileException', 'javax.sound.sampled.LineEvent', 'javax.sound.sampled.DataLine', 'java.io.IOException', 'javax.sound.sampled.LineListener', 'javax.sound.sampled.AudioInputStream'}
Method References: {'String', 'LineEvent'}
Anomalies detected using Z-Score: {'a': 2.004228008472042, 'e': 2.5337432576790784, ' ': 3.109303311164987, 'i': 2.0963176170297877}
Anomalies detected using GESD: {}
Anomalies detected using Quantile: {'a': 126, 'e': 149, ' ': 174, 'i': 130}
Fourier Transform Values: [177886.           6452.87512889   8625.71710489 ...   1201.97243192
   8625.71710489   6452.87512889]
Entropy: 4.17518573851681
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Audio_Steganography/Decode_Audio.java

Classes: {'Decode_Audio'}
Imports: {'javax.crypto.spec.PBEKeySpec', 'javax.sound.sampled.AudioSystem', 'javax.crypto.SecretKeyFactory', 'javax.crypto.spec.PBEParameterSpec', 'Coding.SendEmail', 'java.io.FileNotFoundException', 'javax.crypto.NoSuchPaddingException', 'java.io.IOException', 'javax.sound.sampled.AudioInputStream', 'javax.swing.JFileChooser', 'java.io.File', 'javax.crypto.SecretKey', 'javax.crypto.Cipher', 'java.security.InvalidAlgorithmParameterException', 'java.security.InvalidKeyException', 'javax.swing.JOptionPane', 'java.io.PrintWriter', 'java.security.NoSuchAlgorithmException', 'javax.crypto.IllegalBlockSizeException', 'javax.sound.sampled.UnsupportedAudioFileException', 'java.security.spec.InvalidKeySpecException', 'javax.crypto.BadPaddingException'}
Method References: {'char', 'boolean', 'byte', 'java', 'String'}
Anomalies detected using Z-Score: {' ': 7.695942454269778, 'e': 2.41291678709897}
Anomalies detected using GESD: {' ': 7.695942454269778}
Anomalies detected using Quantile: {' ': 3947, 'o': 887, 'a': 1006, 'n': 756, 'e': 1403, 't': 1148, 'i': 688, 'r': 611, '.': 649, '=': 900}
Fourier Transform Values: [1685503.           44122.02860613   26563.42911851 ...   30020.71622136
   26563.42911851   44122.02860613]
Entropy: 4.388894387513707
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Audio_Steganography/Encode_Audio.java

Classes: {'CaptureThread', 'Encode_Audio'}
Imports: {'java.awt.Cursor', 'java.io.ByteArrayInputStream', 'javax.crypto.spec.PBEKeySpec', 'javax.sound.sampled.AudioSystem', 'javax.crypto.SecretKeyFactory', 'javax.swing.ImageIcon', 'javax.crypto.spec.PBEParameterSpec', 'Coding.SendEmail', 'javax.sound.sampled.AudioFileFormat', 'javax.sound.sampled.TargetDataLine', 'javax.crypto.NoSuchPaddingException', 'java.io.IOException', 'javax.sound.sampled.AudioInputStream', 'javax.swing.JFileChooser', 'java.io.File', 'javax.sound.sampled.LineUnavailableException', 'javax.crypto.SecretKey', 'javax.sound.sampled.AudioFormat', 'javax.crypto.Cipher', 'java.awt.Font', 'java.security.InvalidAlgorithmParameterException', 'javax.sound.sampled.Mixer', 'javax.sound.sampled.DataLine', 'java.security.InvalidKeyException', 'javax.swing.filechooser.FileFilter', 'javax.swing.JOptionPane', 'java.io.ByteArrayOutputStream', 'java.security.NoSuchAlgorithmException', 'javax.crypto.IllegalBlockSizeException', 'javax.sound.sampled.UnsupportedAudioFileException', 'java.security.spec.InvalidKeySpecException', 'javax.crypto.BadPaddingException'}
Method References: {'File', 'int', 'char', 'AudioFormat', 'boolean', 'byte', 'java', 'String'}
Anomalies detected using Z-Score: {'e': 2.4151876012567324, ' ': 7.60793423706105}
Anomalies detected using GESD: {' ': 7.60793423706105}
Anomalies detected using Quantile: {'a': 1901, 'e': 2475, ' ': 6866, 'i': 1320, 'o': 1604, 't': 2083, 'n': 1477, 'r': 1211, '=': 1416}
Fourier Transform Values: [3069027.           57452.61197284   44290.50120527 ...   20672.35012589
   44290.50120527   57452.61197284]
Entropy: 4.379010639898907
Steganography Likely Detected!
No hidden message pattern detected.
Analyzing: ./DigitalSteganography/src/Audio_Steganography/RecordTimer.java

Classes: {'RecordTimer'}
Imports: {'java.util.TimeZone', 'java.util.Date', 'javax.swing.JLabel', 'java.text.SimpleDateFormat', 'java.text.DateFormat'}
Method References: {'String'}
Anomalies detected using Z-Score: {'e': 2.7288191887623, ' ': 5.431856796762747}
Anomalies detected using GESD: {' ': 5.431856796762747}
Anomalies detected using Quantile: {'a': 72, 'e': 138, ' ': 248, 'i': 86, 't': 98, 'r': 80, '\n': 70, '\t': 97}
Fourier Transform Values: [129021.          11913.68529967   3103.56983347 ...   2226.63270861
   3103.56983347  11913.68529967]
Entropy: 3.923038697595316
No Steganography Detected.
No hidden message pattern detected.
